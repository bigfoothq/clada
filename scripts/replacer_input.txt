=== PROCESSED: 2025-06-20 21:05:06 ===
SUCCESS Block 1: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/test/execute.test.js
SUCCESS Block 2: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/test/parse.test.js
===

Looking at the covenant files and test files, I need to add tests for the new behaviors (Examples 10 and 11 for append functionality).

<<<EXPLANATION>>>
Adding tests for append functionality - Example 10 tests appending to existing file, Example 11 tests appending to non-existent file

<<<FILE>>>
clada/main/components/write/main/core/test-unit/test/execute.test.js

<<<SEARCH>>>
  it('errors on target is directory', () => {
    const dirPath = path.join(tempDir, 'existing-dir');
    fs.mkdirSync(dirPath);
    
    const task = { path: 'existing-dir', content: 'data' };
    const result = executeWrite(task, context);
    
    assert.ok(!result.ok);
    assert.equal(result.error.type, 'permission_denied');
    assert.match(result.error.message, /Cannot write to directory: existing-dir/);
  });
});
<<<REPLACE>>>
  it('errors on target is directory', () => {
    const dirPath = path.join(tempDir, 'existing-dir');
    fs.mkdirSync(dirPath);
    
    const task = { path: 'existing-dir', content: 'data' };
    const result = executeWrite(task, context);
    
    assert.ok(!result.ok);
    assert.equal(result.error.type, 'permission_denied');
    assert.match(result.error.message, /Cannot write to directory: existing-dir/);
  });

  it('appends to existing file', () => {
    const filePath = path.join(tempDir, 'log.txt');
    fs.writeFileSync(filePath, 'line1\n');
    
    const task = { path: 'log.txt', content: 'line2\n', append: true };
    const result = executeWrite(task, context);
    
    assert.ok(result.ok);
    assert.equal(fs.readFileSync(filePath, 'utf8'), 'line1\nline2\n');
  });

  it('appends to non-existent file', () => {
    const task = { path: 'new-log.txt', content: 'first line\n', append: true };
    
    const result = executeWrite(task, context);
    assert.ok(result.ok);
    
    const filePath = path.join(tempDir, 'new-log.txt');
    assert.ok(fs.existsSync(filePath));
    assert.equal(fs.readFileSync(filePath, 'utf8'), 'first line\n');
  });
});
<<<END>>>

<<<EXPLANATION>>>
Adding tests for append attribute parsing - Example 10 tests append="true", Example 11 tests append="false"

<<<FILE>>>
clada/main/components/write/main/core/test-unit/test/parse.test.js

<<<SEARCH>>>
  it('errors on missing content', () => {
    const node = xmlToNode('<write path="file.txt"></write>');
    
    const result = parseWrite(node);
    assert.ok(!result.ok);
    assert.equal(result.error.type, 'malformed_xml');
    assert.match(result.error.message, /Missing content/);
  });
});
<<<REPLACE>>>
  it('errors on missing content', () => {
    const node = xmlToNode('<write path="file.txt"></write>');
    
    const result = parseWrite(node);
    assert.ok(!result.ok);
    assert.equal(result.error.type, 'malformed_xml');
    assert.match(result.error.message, /Missing content/);
  });

  it('parses append attribute when true', () => {
    const node = xmlToNode('<write path="log.txt" append="true"><![CDATA[new line]]></write>');
    
    const result = parseWrite(node);
    assert.ok(result.ok);
    assert.equal(result.value.path, 'log.txt');
    assert.equal(result.value.content, 'new line');
    assert.equal(result.value.append, true);
  });

  it('parses append attribute when false', () => {
    const node = xmlToNode('<write path="data.txt" append="false"><![CDATA[overwrite]]></write>');
    
    const result = parseWrite(node);
    assert.ok(result.ok);
    assert.equal(result.value.path, 'data.txt');
    assert.equal(result.value.content, 'overwrite');
    assert.equal(result.value.append, false);
  });
});
<<<END>>>