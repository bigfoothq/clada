=== PROCESSED: 2025-06-19 22:30:28 ===
SUCCESS Block 1: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/cov/parse.cov.md
SUCCESS Block 2: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/cov/parse.cov.md
SUCCESS Block 3: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/cov/parse.cov.md
SUCCESS Block 4: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/cov/execute.cov.md
SUCCESS Block 5: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/cov/execute.cov.md
ðŸš¨ðŸš¨ðŸš¨ ERROR Block 6: 8 matches found in /Users/stuart/repos/clada/clada/main/components/write/main/core/test-unit/cov/execute.cov.md - ABORTING ðŸš¨ðŸš¨ðŸš¨
===

<<<EXPLANATION>>>

Fix CDATA escape example which is technically impossible, correct error types to match protocol semantics, and clarify return structures for orchestration compatibility.

<<<FILE>>>

clada/main/components/write/main/core/test-unit/cov/parse.cov.md

<<<SEARCH>>>
### Example 5: CDATA escape sequence
Input:
```xml
<write path="tricky.xml"><![CDATA[<data>text]]&gt;</data>]]></write>
```
Output:
```json
{"path": "tricky.xml", "content": "<data>text]]></data>"}
```
<<<REPLACE>>>
### Example 5: Content with XML-like text
Input:
```xml
<write path="config.xml"><![CDATA[<root>
  <item>value</item>
</root>]]></write>
```
Output:
```json
{"path": "config.xml", "content": "<root>\n  <item>value</item>\n</root>"}
```
<<<END>>>

<<<EXPLANATION>>>

Empty path is a validation error, not XML malformation. Protocol defines malformed_xml for XML syntax issues only.

<<<FILE>>>

clada/main/components/write/main/core/test-unit/cov/parse.cov.md

<<<SEARCH>>>
### Example 7: Empty path
Input:
```xml
<write path=""><![CDATA[content]]></write>
```
Output:
```json
{"error": "malformed_xml", "message": "Empty path attribute"}
```
<<<REPLACE>>>
### Example 7: Empty path
Input:
```xml
<write path=""><![CDATA[content]]></write>
```
Output:
```json
{"error": "path_validation", "message": "Empty path attribute"}
```
<<<END>>>

<<<EXPLANATION>>>

Add note about CDATA limitations and return value structure to prevent confusion during test generation.

<<<FILE>>>

clada/main/components/write/main/core/test-unit/cov/parse.cov.md

<<<SEARCH>>>
# Write Parser Covenant

## parseWrite(node) â†’ {path, content} | {error, message}

Extracts path and content from XML node.
<<<REPLACE>>>
# Write Parser Covenant

## parseWrite(node) â†’ {path, content} | {error, message}

Extracts path and content from XML node.

Note: CDATA sections cannot contain the literal string `]]>`. If needed in content, users must split across multiple CDATA sections or use different encoding.

Note: Parser-level errors return descriptive error types, not protocol error codes. Orchestrator maps these to protocol errors.
<<<END>>>

<<<EXPLANATION>>>

Clarify that execute returns results compatible with orchestration layer, not just success boolean.

<<<FILE>>>

clada/main/components/write/main/core/test-unit/cov/execute.cov.md

<<<SEARCH>>>
# Write Executor Covenant

## executeWrite({path, content}, {cwd, allowEscape}) â†’ {success} | {error, message}

Creates file at path with content.
<<<REPLACE>>>
# Write Executor Covenant

## executeWrite(task, context) â†’ {success} | {error, message}

Creates file at path with content. Returns protocol-compatible result.

Parameters:
- task: {path: string, content: string}
- context: {cwd: string, config: {allowEscape: boolean}}
<<<END>>>

<<<EXPLANATION>>>

Update execute examples to match new parameter structure.

<<<FILE>>>

clada/main/components/write/main/core/test-unit/cov/execute.cov.md

<<<SEARCH>>>
### Example 1: Basic file creation
Input: 
```json
{"path": "new.txt", "content": "hello world"}
```
Context:
```json
{"cwd": "/app", "allowEscape": false}
```
<<<REPLACE>>>
### Example 1: Basic file creation
Task: 
```json
{"path": "new.txt", "content": "hello world"}
```
Context:
```json
{"cwd": "/app", "config": {"allowEscape": false}}
```
<<<END>>>

<<<EXPLANATION>>>

Apply same context structure fix to remaining examples for consistency.

<<<FILE>>>

clada/main/components/write/main/core/test-unit/cov/execute.cov.md

<<<SEARCH>>>
Context:
```json
{"cwd": "/app", "allowEscape": false}
```
<<<REPLACE>>>
Context:
```json
{"cwd": "/app", "config": {"allowEscape": false}}
```
<<<END>>>