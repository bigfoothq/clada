=== PROCESSED: 2025-06-20 21:12:03 ===
SUCCESS Block 1: Updated /Users/stuart/repos/clada/clada/main/components/write/main/core/src/execute.js
===

The test expects `symlink_not_allowed` but gets `permission_denied`. Looking at the error output, there's a typo in the assertion comparison: `'persymlissionk_deniot_allowed'` - this appears to be a formatting issue in the test output display.

The real issue: when writing to a symlink fails, Node.js throws an EACCES/EPERM error, which the code catches and returns as `permission_denied`. But the test expects a specific `symlink_not_allowed` error.

The symlink check happens after the file exists check, but the write attempt fails before our symlink-specific logic can return the expected error. We need to check for symlinks earlier, before attempting any write operation.

<<<EXPLANATION>>>
Move symlink check before write attempt to ensure correct error type is returned

<<<FILE>>>
clada/main/components/write/main/core/src/execute.js

<<<SEARCH>>>
  try {
    // Check if path exists and is symlink
    if (fs.existsSync(fullPath)) {
      const stats = fs.lstatSync(fullPath);
      if (stats.isSymbolicLink()) {
        return {
          ok: false,
          error: { type: 'symlink_not_allowed', message: `Cannot write through symlink: ${filePath}` }
        };
      }
      if (stats.isDirectory()) {
        return {
          ok: false,
          error: { type: 'permission_denied', message: `Cannot write to directory: ${filePath}` }
        };
      }
    }

    // Create parent directories if needed
    const dir = path.dirname(fullPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    // Write file
    if (task.append) {
      fs.appendFileSync(fullPath, content, 'utf8');
    } else {
      fs.writeFileSync(fullPath, content, 'utf8');
    }

    return { ok: true };
  } catch (error) {
<<<REPLACE>>>
  // Check if path exists and is symlink before any operations
  if (fs.existsSync(fullPath)) {
    try {
      const stats = fs.lstatSync(fullPath);
      if (stats.isSymbolicLink()) {
        return {
          ok: false,
          error: { type: 'symlink_not_allowed', message: `Cannot write through symlink: ${filePath}` }
        };
      }
      if (stats.isDirectory()) {
        return {
          ok: false,
          error: { type: 'permission_denied', message: `Cannot write to directory: ${filePath}` }
        };
      }
    } catch (error) {
      // If lstat fails, continue to write attempt
    }
  }

  try {
    // Create parent directories if needed
    const dir = path.dirname(fullPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    // Write file
    if (task.append) {
      fs.appendFileSync(fullPath, content, 'utf8');
    } else {
      fs.writeFileSync(fullPath, content, 'utf8');
    }

    return { ok: true };
  } catch (error) {
<<<END>>>