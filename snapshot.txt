
=== START FILE: ./proj/comp/sham-action-parser/test/parseShamResponse.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { marked, Token } from 'marked';
import { parseShamResponse } from '../src/index';

const testPath = join(__dirname, '../test-data/parseShamResponse.md');
const mdContent = readFileSync(testPath, 'utf8');

const tokens: Token[] = marked.lexer(mdContent);
const codeBlocks = tokens.filter(t => t.type === 'code') as Array<Token & {type: 'code', text: string}>;
const testNames = tokens
  .filter(t => t.type === 'heading' && 'depth' in t && t.depth === 3)
  .map(t => (t as any).text as string);

describe('parseShamResponse', () => {
  testNames.forEach((name, i) => {
    const baseIndex = i * 2;
    it(name, async () => {
      const input = codeBlocks[baseIndex].text;
      const expected = JSON.parse(codeBlocks[baseIndex + 1].text);
      const result = await parseShamResponse(input);
      expect(result).toEqual(expected);
    });
  });
});
=== END FILE: ./proj/comp/sham-action-parser/test/parseShamResponse.test.ts ===

=== START FILE: ./proj/comp/sham-action-parser/test/validateShamBlock.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { validateShamBlock } from '../src/index';

const testData = JSON.parse(
  readFileSync(join(__dirname, '../test-data/validateShamBlock.json'), 'utf8')
);

describe('validateShamBlock', () => {
  testData.cases.forEach(({ name, input, expected }) => {
    it(name, () => {
      const [block, actionSchema] = input;
      const result = validateShamBlock(block, actionSchema);
      expect(result).toEqual(expected);
    });
  });
});
=== END FILE: ./proj/comp/sham-action-parser/test/validateShamBlock.test.ts ===

=== START FILE: ./proj/comp/sham-action-parser/test/transformToAction.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { transformToAction, TransformError } from '../src/index';

const testData = JSON.parse(
  readFileSync(join(__dirname, '../test-data/transformToAction.json'), 'utf8')
);

describe('transformToAction', () => {
  testData.cases.forEach(({ name, input, expected, throws }) => {
    it(name, () => {
      const [block, actionDef] = input;
      if (throws) {
        expect(() => transformToAction(block, actionDef)).toThrow(TransformError);
      } else {
        const result = transformToAction(block, actionDef);
        expect(result).toEqual(expected);
      }
    });
  });
});
=== END FILE: ./proj/comp/sham-action-parser/test/transformToAction.test.ts ===

=== START FILE: ./proj/comp/sham-action-parser/test-data/validateShamBlock.json ===
{
  "cases": [
    {
      "name": "valid file_create block",
      "input": [
        {
          "id": "abc",
          "properties": {
            "action": "file_create",
            "path": "/tmp/test.txt",
            "content": "hello"
          }
        },
        {
          "type": "write",
          "description": "Create new file",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "content": {"type": "string", "required": true}
          }
        }
      ],
      "expected": {
        "valid": true,
        "actionType": "file_create",
        "errors": []
      }
    },
    {
      "name": "missing action field",
      "input": [
        {
          "id": "bad",
          "properties": {
            "path": "/tmp/test.txt",
            "content": "hello"
          }
        },
        null
      ],
      "expected": {
        "valid": false,
        "errors": ["Missing 'action' field in SHAM block"]
      }
    },
    {
      "name": "unknown action type",
      "input": [
        {
          "id": "unk",
          "properties": {
            "action": "not_real_action",
            "path": "/tmp/test.txt"
          }
        },
        null
      ],
      "expected": {
        "valid": false,
        "errors": ["Unknown action: not_real_action"]
      }
    },
    {
      "name": "missing required parameter",
      "input": [
        {
          "id": "miss",
          "properties": {
            "action": "file_create",
            "path": "/tmp/test.txt"
          }
        },
        {
          "type": "write",
          "description": "Create new file",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "content": {"type": "string", "required": true}
          }
        }
      ],
      "expected": {
        "valid": false,
        "errors": ["Missing required parameter: content"]
      }
    }
  ]
}
=== END FILE: ./proj/comp/sham-action-parser/test-data/validateShamBlock.json ===

=== START FILE: ./proj/comp/sham-action-parser/test-data/transformToAction.json ===
{
  "cases": [
    {
      "name": "simple string parameters",
      "input": [
        {
          "id": "str",
          "properties": {
            "action": "file_create",
            "path": "/tmp/test.txt",
            "content": "hello world"
          },
          "startLine": 1,
          "endLine": 5
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "content": {"type": "string", "required": true}
          }
        }
      ],
      "expected": {
        "action": "file_create",
        "parameters": {
          "path": "/tmp/test.txt",
          "content": "hello world"
        },
        "metadata": {
          "blockId": "str",
          "startLine": 1,
          "endLine": 5
        }
      }
    },
    {
      "name": "with SHAM annotation",
      "input": [
        {
          "id": "ann",
          "properties": {
            "action": "file_delete",
            "path": "/tmp/remove.txt",
            "@three-char-SHA-256": "abc"
          },
          "startLine": 10,
          "endLine": 13
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"}
          }
        }
      ],
      "expected": {
        "action": "file_delete",
        "parameters": {
          "path": "/tmp/remove.txt"
        },
        "metadata": {
          "blockId": "ann",
          "startLine": 10,
          "endLine": 13
        }
      }
    },
    {
      "name": "integer parameter conversion",
      "input": [
        {
          "id": "int",
          "properties": {
            "action": "file_edit",
            "path": "/tmp/edit.txt",
            "old_text": "foo",
            "new_text": "bar",
            "count": "3"
          },
          "startLine": 1,
          "endLine": 7
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "old_text": {"type": "string", "required": true},
            "new_text": {"type": "string", "required": true},
            "count": {"type": "integer", "required": false, "default": 1}
          }
        }
      ],
      "expected": {
        "action": "file_edit",
        "parameters": {
          "path": "/tmp/edit.txt",
          "old_text": "foo",
          "new_text": "bar",
          "count": 3
        },
        "metadata": {
          "blockId": "int",
          "startLine": 1,
          "endLine": 7
        }
      }
    },
    {
      "name": "enum parameter validation",
      "input": [
        {
          "id": "enum",
          "properties": {
            "action": "exec",
            "code": "print(1)",
            "lang": "python"
          },
          "startLine": 5,
          "endLine": 9
        },
        {
          "type": "dynamic",
          "parameters": {
            "code": {"type": "string", "required": true},
            "lang": {"type": "enum", "values": ["python", "javascript", "bash", "ruby"], "required": true}
          }
        }
      ],
      "expected": {
        "action": "exec",
        "parameters": {
          "code": "print(1)",
          "lang": "python"
        },
        "metadata": {
          "blockId": "enum",
          "startLine": 5,
          "endLine": 9
        }
      }
    },
    {
      "name": "invalid integer throws",
      "input": [
        {
          "id": "bad",
          "properties": {
            "action": "file_edit",
            "path": "/tmp/edit.txt",
            "old_text": "foo",
            "new_text": "bar",
            "count": "not-a-number"
          },
          "startLine": 1,
          "endLine": 7
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true},
            "old_text": {"type": "string", "required": true},
            "new_text": {"type": "string", "required": true},
            "count": {"type": "integer", "required": false}
          }
        }
      ],
      "throws": "TransformError"
    }
  ]
}
=== END FILE: ./proj/comp/sham-action-parser/test-data/transformToAction.json ===

=== START FILE: ./proj/comp/sham-action-parser/test-data/parseShamResponse.md ===
# Tests

## general

### 001-single-valid-file-create-action

```sh sham
#!SHAM [@three-char-SHA-256: abc]
action = "file_create"
path = "/tmp/test.txt"
content = <<'EOT_SHAM_abc'
Hello world!
EOT_SHAM_abc
#!END_SHAM_abc
````

```json
{
  "actions": [{
    "action": "file_create",
    "parameters": {
      "path": "/tmp/test.txt",
      "content": "Hello world!"
    },
    "metadata": {
      "blockId": "abc",
      "startLine": 1,
      "endLine": 7
    }
  }],
  "errors": [],
  "summary": {
    "totalBlocks": 1,
    "successCount": 1,
    "errorCount": 0
  }
}
```

---

### 002-multiple-blocks-with-one-invalid

```sh sham
#!SHAM [@three-char-SHA-256: gd1]
action = "file_create"
path = "/tmp/good.txt"
content = "valid"
#!END_SHAM_gd1

#!SHAM [@three-char-SHA-256: bad]
action = "unknown_action"
path = "/tmp/bad.txt"
#!END_SHAM_bad
```

```json
{
  "actions": [{
    "action": "file_create",
    "parameters": {
      "path": "/tmp/good.txt",
      "content": "valid"
    },
    "metadata": {
      "blockId": "gd1",
      "startLine": 1,
      "endLine": 5
    }
  }],
  "errors": [{
    "blockId": "bad",
    "action": "unknown_action",
    "errorType": "validation",
    "message": "Unknown action: unknown_action",
    "blockStartLine": 7,
    "shamContent": "#!SHAM [@three-char-SHA-256: bad]\naction = \"unknown_action\"\npath = \"/tmp/bad.txt\"\n#!END_SHAM_bad"
  }],
  "summary": {
    "totalBlocks": 2,
    "successCount": 1,
    "errorCount": 1
  }
}
```

---

### 003-missing-required-parameter

```sh sham
#!SHAM [@three-char-SHA-256: mis]
action = "file_create"
content = "missing path"
#!END_SHAM_mis
```

```json
{
  "actions": [],
  "errors": [{
    "blockId": "mis",
    "action": "file_create",
    "errorType": "validation",
    "message": "Missing required parameter: path",
    "blockStartLine": 1,
    "shamContent": "#!SHAM [@three-char-SHA-256: mis]\naction = \"file_create\"\ncontent = \"missing path\"\n#!END_SHAM_mis"
  }],
  "summary": {
    "totalBlocks": 1,
    "successCount": 0,
    "errorCount": 1
  }
}
```

---

### 004-type-conversion-with-boolean-and-integer

```sh sham
#!SHAM [@three-char-SHA-256: typ]
action = "exec"
code = "print('hi')"
lang = "python"
cwd = "/tmp"
#!END_SHAM_typ
```

```json
{
  "actions": [{
    "action": "exec",
    "parameters": {
      "code": "print('hi')",
      "lang": "python",
      "cwd": "/tmp"
    },
    "metadata": {
      "blockId": "typ",
      "startLine": 1,
      "endLine": 6
    }
  }],
  "errors": [],
  "summary": {
    "totalBlocks": 1,
    "successCount": 1,
    "errorCount": 0
  }
}
```

=== END FILE: ./proj/comp/sham-action-parser/test-data/parseShamResponse.md ===

=== START FILE: ./proj/comp/sham-action-parser/doc/API.md ===
# Component: sham-action-parser

## Component Type
standard

## Documentation Debt
[Must be empty before implementation]

## Dependencies
[Provisional - updated via STOP protocol when implementation reveals actual needs]

```yaml
dependencies:
  external/nesl-js:
    functions: [parseSham]
    types: [Block, ParseResult, ParseError]
  
  external/js-yaml:
    functions: [load]
    types: []
  
  node:fs/promises:
    functions: [readFile]
    types: []
  
  node:path:
    functions: [resolve, join]
    types: []
```

## Exports
```yaml
exports:
  functions: [parseShamResponse, validateShamBlock, transformToAction]
  types: [ParseResult, CladaAction, ParseError, ValidationResult, TransformError]
  errors: [TransformError]
```

### parseShamResponse
- **Signature**: `parseShamResponse(shamText: string) -> Promise<ParseResult>`
- **Purpose**: Parse SHAM blocks from text into validated clada actions.
- **Test-data**: `test-data/parseShamResponse.json`

### validateShamBlock
- **Signature**: `validateShamBlock(block: ShamBlock, actionSchema: ActionDefinition) -> ValidationResult`
- **Purpose**: Validate a single SHAM block against action schema.
- **Test-data**: `test-data/validateShamBlock.json`

### transformToAction
- **Signature**: `transformToAction(block: ShamBlock, actionDef: ActionDefinition) -> CladaAction`
- **Purpose**: Transform validated SHAM block into typed clada action.
- **Throws**: `TransformError` when type conversion fails
- **Test-data**: `test-data/transformToAction.json`

## Internal Functions
[Discovered during implementation - not exported]

### loadActionSchema
- **Signature**: `loadActionSchema() -> Promise<Map<string, ActionDefinition>>`
- **Purpose**: Load and parse unified-design.yaml action definitions.

### parseBoolean
- **Signature**: `parseBoolean(value: string) -> boolean`
- **Purpose**: Convert string "true"/"false" to boolean.

### parseInteger  
- **Signature**: `parseInteger(value: string) -> number`
- **Purpose**: Convert numeric string to integer.
- **Throws**: `TransformError` when not a valid integer

### validateAbsolutePath
- **Signature**: `validateAbsolutePath(path: string) -> boolean`
- **Purpose**: Check if string is valid absolute path.

### validateEnum
- **Signature**: `validateEnum(value: string, allowed: string[]) -> boolean`
- **Purpose**: Check if value is in allowed enum values.

## Types

### ParseResult
```typescript
{
  actions: CladaAction[]      // Successfully parsed actions
  errors: ParseError[]        // All errors encountered
  summary: {
    totalBlocks: number
    successCount: number
    errorCount: number
  }
}
```

### CladaAction
```typescript
{
  action: string              // Action name from unified-design
  parameters: Record<string, any>  // Typed parameters
  metadata: {
    blockId: string          // SHAM block ID
    startLine: number
    endLine: number
  }
}
```

### ParseError
```typescript
{
  blockId: string            // Which SHAM block failed
  errorType: 'syntax' | 'validation' | 'type'
  message: string            // Specific error details
  blockStartLine?: number    // Starting line of the SHAM block
  shamContent?: string       // Original SHAM block for context
}
```

### ValidationResult
```typescript
{
  valid: boolean
  actionType?: string        // Identified action if valid
  errors?: string[]          // Validation errors if invalid
}
```

### TransformError
```typescript
class TransformError extends Error {
  parameterName: string
  expectedType: string
  actualValue: string
}
```

### ActionDefinition
```typescript
{
  type: 'read' | 'write' | 'meta' | 'git' | 'dynamic'
  description: string
  parameters: Record<string, ParameterDef>
  returns: Record<string, any>
}
```

### ParameterDef
```typescript
{
  type: string              // 'string' | 'integer' | 'boolean' | 'enum'
  required: boolean
  format?: string           // e.g. 'absolute_path'
  values?: string[]         // for enum type
  default?: any
}
```
=== END FILE: ./proj/comp/sham-action-parser/doc/API.md ===

=== START FILE: ./proj/comp/sham-action-parser/doc/ABSTRACT.md ===
# SHAM Action Parser

Parses SHAM blocks from LLM responses into validated clada action objects, executing as many valid actions as possible while collecting errors for failed blocks.

## Overview

This component bridges between LLM-generated SHAM syntax and clada's action system. It processes text containing SHAM blocks, validates each block independently against clada's action schema, and transforms valid blocks into executable action objects. The parser is intentionally permissive - it processes all blocks and collects both successes and failures, allowing clada to execute valid actions while reporting specific errors back to the LLM for correction. This design minimizes expensive LLM regeneration by salvaging partial success from responses containing some malformed blocks.

The parser handles:
- SHAM syntax parsing via nesl-js
- Action type validation against unified-design schema  
- Parameter presence and type checking
- String-to-type conversions (booleans, integers, paths)
- Comprehensive error collection with block context
- Preservation of SHAM metadata (IDs, line numbers)

This approach enables efficient LLM-clada interaction by providing detailed feedback on exactly which actions failed and why, allowing targeted corrections rather than full regeneration.
=== END FILE: ./proj/comp/sham-action-parser/doc/ABSTRACT.md ===

=== START FILE: ./proj/comp/sham-action-parser/doc/ARCH.md ===
# SHAM Action Parser - Architecture

## Design Philosophy

**Maximize Execution, Minimize Regeneration**: Parse and validate each SHAM block independently. Execute all valid actions while collecting detailed errors for invalid ones. This avoids expensive LLM token usage for full response regeneration.

## Processing Pipeline

1. **SHAM Parsing** (via nesl-js)
   - Input: Raw text with SHAM blocks
   - Output: Parsed blocks with string properties
   - Preserves: Block IDs, line numbers, raw content

2. **Action Validation** (per block)
   - Validate `action` field exists and matches known clada actions
   - Check required parameters for specific action type
   - Continue processing even if some blocks fail

3. **Type Transformation** (per valid block)
   - Convert string values to appropriate types
   - Validate constraints (path formats, enum values, etc.)
   - Preserve original SHAM metadata

4. **Result Aggregation**
   - Collect all successful action objects
   - Collect all errors with context
   - Return comprehensive ParseResult

## Error Handling Strategy

Each block processed independently with errors collected in structured format:
- `blockId`: SHAM block identifier
- `blockStartLine`: Starting line number of the SHAM block in original text
- `errorType`: Category (syntax, validation, type)
- `message`: Specific error details
- `shamContent`: Original SHAM block for LLM reference

## Type Conversions

All SHAM values are strings, requiring conversion:
- **Booleans**: "true"/"false" → boolean
- **Integers**: Numeric strings → number
- **Paths**: Validate absolute path format
- **Enums**: Validate against allowed values
- **Arrays**: Not supported in SHAM (would need special syntax)

## Action Mapping

SHAM actions map directly to clada tool names from unified-design.yaml:
- Must use exact tool names (e.g., `file_create`, not `create_file`)
- No aliasing or fuzzy matching to avoid ambiguity

## Constraints

- SHAM doesn't support complex types (objects, arrays)
- All values are strings requiring parsing
- No nested structures
- Heredoc strings preserve internal formatting

## Dependencies on Other Components

- Requires action schema definitions (types, required params)
- Will need shared error types with response formatter
- Path validation utilities
=== END FILE: ./proj/comp/sham-action-parser/doc/ARCH.md ===

=== START FILE: ./proj/comp/sham-action-parser/src/transformToAction.ts ===
import { CladaAction, TransformError, ActionDefinition } from './types.js';
import type { Block } from 'nesl-js';

/**
 * Transform validated SHAM block into typed clada action
 * Converts string values to proper types based on schema
 */
export function transformToAction(
  block: Block,
  actionDef: ActionDefinition
): CladaAction {
  const action = block.properties.action;
  if (!action) {
    throw new TransformError(
      'Block missing action property',
      'action',
      'string',
      'undefined'
    );
  }
  const parameters: Record<string, any> = {};

  // Process each parameter defined in the schema
  for (const [paramName, paramDef] of Object.entries(actionDef.parameters || {})) {
    // Skip if parameter not provided and has a default
    if (!(paramName in block.properties)) {
      if ('default' in paramDef) {
        parameters[paramName] = paramDef.default;
      }
      continue;
    }

    const rawValue = block.properties[paramName];
    
    // Skip if value is undefined (shouldn't happen if we got here, but TypeScript needs this)
    if (rawValue === undefined) {
      continue;
    }

    try {
      // Convert based on parameter type
      switch (paramDef.type) {
        case 'string':
          parameters[paramName] = rawValue;
          // Validate format if specified
          if (paramDef.format === 'absolute_path' && !validateAbsolutePath(rawValue)) {
            throw new TransformError(
              `Invalid absolute path: ${rawValue}`,
              paramName,
              'absolute_path',
              rawValue
            );
          }
          break;

        case 'integer':
          parameters[paramName] = parseInteger(rawValue);
          break;

        case 'boolean':
          parameters[paramName] = parseBoolean(rawValue);
          break;

        case 'enum':
          if (!paramDef.values || !paramDef.values.includes(rawValue)) {
            throw new TransformError(
              `Invalid enum value: ${rawValue}. Allowed: ${paramDef.values?.join(', ')}`,
              paramName,
              'enum',
              rawValue
            );
          }
          parameters[paramName] = rawValue;
          break;

        default:
          // Default to string for unknown types
          parameters[paramName] = rawValue;
      }
    } catch (error) {
      if (error instanceof TransformError) {
        // Update parameter name in error
        error.parameterName = paramName;
        throw error;
      }
      throw new TransformError(
        `Failed to transform parameter ${paramName}: ${error}`,
        paramName,
        paramDef.type,
        rawValue
      );
    }
  }

  return {
    action,
    parameters,
    metadata: {
      blockId: block.id,
      startLine: block.startLine,
      endLine: block.endLine ?? block.startLine // Use startLine if endLine is null
    }
  };
}

// Helper functions for type conversion and validation

function parseBoolean(value: string): boolean {
  if (value === 'true') return true;
  if (value === 'false') return false;
  throw new TransformError(
    `Invalid boolean value: ${value}`,
    'unknown',
    'boolean',
    value
  );
}

function parseInteger(value: string): number {
  const num = parseInt(value, 10);
  if (isNaN(num) || num.toString() !== value.trim()) {
    throw new TransformError(
      `Invalid integer value: ${value}`,
      'unknown',
      'integer',
      value
    );
  }
  return num;
}

function validateAbsolutePath(path: string): boolean {
  // Unix/Linux/Mac absolute paths start with /
  // Windows absolute paths like C:\ or \\server\share
  return /^(\/|[A-Za-z]:\\|\\\\)/.test(path);
}
=== END FILE: ./proj/comp/sham-action-parser/src/transformToAction.ts ===

=== START FILE: ./proj/comp/sham-action-parser/src/types.ts ===
export interface ParseResult {
  actions: CladaAction[];
  errors: ParseError[];
  summary: {
    totalBlocks: number;
    successCount: number;
    errorCount: number;
  };
}

export interface CladaAction {
  action: string;
  parameters: Record<string, any>;
  metadata: {
    blockId: string;
    startLine: number;
    endLine: number;
  };
}

export interface ParseError {
  blockId: string;
  action?: string;
  errorType: 'syntax' | 'validation' | 'type';
  message: string;
  blockStartLine?: number;
  shamContent?: string;
}

export interface ValidationResult {
  valid: boolean;
  actionType?: string;
  errors?: string[];
}

export class TransformError extends Error {
  constructor(
    message: string,
    public parameterName: string,
    public expectedType: string,
    public actualValue: string
  ) {
    super(message);
    this.name = 'TransformError';
  }
}

export interface ActionDefinition {
  type: 'read' | 'write' | 'meta' | 'git' | 'dynamic';
  description: string;
  parameters: Record<string, ParameterDef>;
  returns?: Record<string, any>;
}

export interface ParameterDef {
  type: string;
  required: boolean;
  format?: string;
  values?: string[];
  default?: any;
}
=== END FILE: ./proj/comp/sham-action-parser/src/types.ts ===

=== START FILE: ./proj/comp/sham-action-parser/src/validateShamBlock.ts ===
import { ValidationResult, ActionDefinition } from './types.js';
import type { Block } from 'nesl-js';

/**
 * Validate a single SHAM block against action schema
 * Checks action exists and required params present
 */
export function validateShamBlock(
  block: Block,
  actionSchema: ActionDefinition | null
): ValidationResult {
  // Check if block has properties object
  if (!block.properties) {
    return {
      valid: false,
      errors: ['Block missing properties object']
    };
  }

  // Check if action field exists
  if (!block.properties.action) {
    return {
      valid: false,
      errors: ['Missing \'action\' field in SHAM block']
    };
  }

  const actionType = block.properties.action;

  // If no schema provided, it's an unknown action
  if (!actionSchema) {
    return {
      valid: false,
      errors: [`Unknown action: ${actionType}`]
    };
  }

  // Check all required parameters are present
  const errors: string[] = [];
  
  if (actionSchema.parameters) {
    for (const [paramName, paramDef] of Object.entries(actionSchema.parameters)) {
      if (paramDef.required && !(paramName in block.properties)) {
        errors.push(`Missing required parameter: ${paramName}`);
      }
    }
  }

  if (errors.length > 0) {
    return {
      valid: false,
      errors
    };
  }

  return {
    valid: true,
    actionType,
    errors: []
  };
}
=== END FILE: ./proj/comp/sham-action-parser/src/validateShamBlock.ts ===

=== START FILE: ./proj/comp/sham-action-parser/src/index.ts ===
/**
 * SHAM Action Parser - Parses SHAM blocks into validated clada actions
 */

import { ParseResult, CladaAction, ParseError, ValidationResult, TransformError, ActionDefinition } from './types.js';
import { validateShamBlock } from './validateShamBlock.js';
import { transformToAction } from './transformToAction.js';
import { parseSham, type Block, type ParseResult as NeslParseResult } from 'nesl-js';
import { load as loadYaml } from 'js-yaml';
import { readFile } from 'fs/promises';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Re-export types for consumers
export { ParseResult, CladaAction, ParseError, ValidationResult, TransformError };

// Cache for action schema
let actionSchemaCache: Map<string, ActionDefinition> | null = null;

/**
 * Parse SHAM blocks from text into validated clada actions
 * Processes all blocks, collecting successes and errors
 */
export async function parseShamResponse(shamText: string): Promise<ParseResult> {
  const actions: CladaAction[] = [];
  const errors: ParseError[] = [];

  // Parse SHAM blocks using nesl-js
  let parseResult: NeslParseResult;
  try {
    parseResult = parseSham(shamText);
    
    // Handle case where parseSham returns undefined or null
    if (!parseResult) {
      parseResult = { blocks: [], errors: [] };
    }
  } catch (error) {
    return {
      actions: [],
      errors: [{
        blockId: 'unknown',
        errorType: 'syntax',
        message: `Failed to parse SHAM: ${error}`,
        shamContent: shamText
      }],
      summary: {
        totalBlocks: 0,
        successCount: 0,
        errorCount: 1
      }
    };
  }

  // Load action schema
  const actionSchema = await loadActionSchema();

  // Process each SHAM block
  const blocks = parseResult.blocks || [];
  
  // If no blocks found, return empty result
  if (blocks.length === 0) {
    return {
      actions: [],
      errors: [],
      summary: {
        totalBlocks: 0,
        successCount: 0,
        errorCount: 0
      }
    };
  }
  
  for (const block of blocks) {
    const blockId = block.id || 'unknown';
    
    try {
      // Get action type from block
      const actionType = block.properties?.action;
      const actionDef = actionType ? actionSchema.get(actionType) : undefined;

      // Validate block
      const validation = validateShamBlock(block, actionDef ?? null);
      
      if (!validation.valid) {
        errors.push({
          blockId,
          action: actionType,
          errorType: 'validation',
          message: validation.errors?.[0] || 'Validation failed',
          blockStartLine: block.startLine,
          shamContent: reconstructShamBlock(block)
        });
        continue;
      }

      // Transform to action
      try {
        const action = transformToAction(block, actionDef!);
        actions.push(action);
      } catch (error) {
        if (error instanceof TransformError) {
          errors.push({
            blockId,
            action: actionType,
            errorType: 'type',
            message: error.message,
            blockStartLine: block.startLine,
            shamContent: reconstructShamBlock(block)
          });
        } else {
          throw error;
        }
      }
    } catch (error) {
      errors.push({
        blockId,
        action: block.properties?.action,
        errorType: 'validation',
        message: `Unexpected error: ${error}`,
        blockStartLine: block.startLine,
        shamContent: reconstructShamBlock(block)
      });
    }
  }

  return {
    actions,
    errors,
    summary: {
      totalBlocks: blocks.length,
      successCount: actions.length,
      errorCount: errors.length
    }
  };
}

/**
 * Load and cache action definitions from unified-design.yaml
 */
async function loadActionSchema(): Promise<Map<string, ActionDefinition>> {
  if (actionSchemaCache) {
    return actionSchemaCache;
  }

  // Get the directory of this module
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);
  
  // Navigate to project root and find unified-design.yaml
  const yamlPath = join(__dirname, '../../../../unified-design.yaml');
  
  try {
    const yamlContent = await readFile(yamlPath, 'utf8');
    const design = loadYaml(yamlContent) as any;
    
    actionSchemaCache = new Map();
    
    // Extract tool definitions
    if (design.tools) {
      for (const [toolName, toolDef] of Object.entries(design.tools)) {
        actionSchemaCache.set(toolName, toolDef as ActionDefinition);
      }
    }
    
    return actionSchemaCache;
  } catch (error) {
    throw new Error(`Failed to load unified-design.yaml: ${error}`);
  }
}

/**
 * Reconstruct SHAM block text for error context
 */
function reconstructShamBlock(block: Block): string {
  const lines: string[] = [];
  
  // Start line
  lines.push(`#!SHAM [@three-char-SHA-256: ${block.id || 'unknown'}]`);
  
  // Properties
  for (const [key, value] of Object.entries(block.properties || {})) {
    if (key.startsWith('@')) continue; // Skip annotations
    
    if (typeof value === 'string' && value.includes('\n')) {
      // Multi-line value with heredoc
      lines.push(`${key} = <<'EOT_SHAM_${block.id}'`);
      lines.push(value);
      lines.push(`EOT_SHAM_${block.id}`);
    } else {
      // Single line value - use JSON.stringify to handle quotes properly
      lines.push(`${key} = ${JSON.stringify(value)}`);
    }
  }
  
  // End line
  lines.push(`#!END_SHAM_${block.id || 'unknown'}`);
  
  return lines.join('\n');
}

// Re-export functions for consumers
export { validateShamBlock, transformToAction };
=== END FILE: ./proj/comp/sham-action-parser/src/index.ts ===

=== START FILE: ./unified-design.yaml ===
# AI Coder Tools Schema - Unified Design

# Clada executes filesystem and runtime commands embedded in LLM output using SHAM syntax. It provides deterministic filesystem access and shell command execution for LLM coding agents.

# SHAM syntax example:

SHAM_synatx_example: |
  ```sh sham
  #!SHAM [@three-char-SHA-256: k7m]
  action = "file_create"
  path = "/tmp/\"hello\".txt"
  content = <<'EOT_SHAM_k7m'
  Hello world!
  how are you?
  EOT_SHAM_k7m
  #!END_SHAM_k7m
  ```


tools:
  # File Operations
  file_create:
    type: write
    description: Create new file
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      content: {type: string, required: true}
    returns: {success: boolean, error?: string}
    
  file_write:
    type: write
    description: Replace entire file content
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      content: {type: string, required: true}
    returns: {success: boolean, error?: string}
    
  file_edit:
    type: write
    description: Replace substring in file
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      old_text: {type: string, required: true}
      new_text: {type: string, required: true}
      count: {type: integer, required: false, default: 1}
    returns: {success: boolean, replacements_made?: integer, error?: string}
    
  file_append:
    type: write
    description: Append to file
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      content: {type: string, required: true}
    returns: {success: boolean, error?: string}
    
  file_delete:
    type: write
    description: Delete file
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  file_move:
    type: write
    description: Move/rename file
    accessibility: [llm]
    parameters:
      old_path: {type: string, required: true, format: absolute_path}
      new_path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  file_read:
    type: read
    description: Read file content (ephemeral)
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, content?: string, error?: string}
    
  # Directory Operations
  dir_create:
    type: write
    description: Create directory
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  dir_delete:
    type: write
    description: Delete directory
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  # Read Operations
  ls:
    type: read
    description: List directory contents
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: 
      success: boolean
      data:
        type: array
        items:
          name: string
          type: string  # file|directory
          size: integer
          modified: timestamp
      error: string
    
  grep:
    type: read
    description: Search pattern in files
    accessibility: [llm]
    parameters:
      pattern: {type: string, required: true}
      path: {type: string, required: true, format: absolute_path}
      include: {type: string, required: false}
    returns: 
      success: boolean
      data:
        type: array
        items:
          file: string
          line_number: integer
          line: string
      error: string
    
  glob:
    type: read
    description: Find files matching pattern
    accessibility: [llm]
    parameters:
      pattern: {type: string, required: true}
      base_path: {type: string, required: true, format: absolute_path}
    returns: 
      success: boolean
      data:
        type: array
        items: string
      error: string
    
  # Execution
  exec:
    type: dynamic
    description: Execute code
    accessibility: [llm]
    parameters:
      code: {type: string, required: true}
      lang: {type: enum, values: [python, javascript, bash, ruby], required: true}
      version: {type: string, required: false}
      cwd: {type: string, required: false, format: absolute_path}
    returns: {success: boolean, stdout?: string, stderr?: string, exit_code?: integer, error?: string}

  # Context Operations
  context_add:
    type: meta
    description: Add item to working context (persistent)
    accessibility: [llm, user]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
      
  context_remove:
    type: meta
    description: Remove item from working context
    accessibility: [llm, user]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
      
  context_list:
    type: meta
    description: List items in working context
    accessibility: [llm, user]
    parameters: {}
    returns: 
      success: boolean
      data:
        type: array
        items:
          path: string
          size: integer
      error: string
    
  context_prune:
    type: meta
    description: Remove unused items from working context
    accessibility: [llm, user]
    parameters: {}
    returns: {success: boolean, removed?: array of strings, error?: string}
    
  context_clear:
    type: meta
    description: Clear all working context items
    accessibility: [llm, user]
    parameters: {}
    returns: {success: boolean, error?: string}
    
  # Git Operations
  git_squash:
    type: git
    description: Squash commits
    slash_command: true
    parameters:
      mode: {type: enum, values: [auto_ai, ai_messages, hours, days, contiguous_only=true, msg_contains], required: true}
      message: {type: string, required: false}
      hours: {type: integer, required: false, when: "mode=hours"}
      days: {type: integer, required: false, when: "mode=days"}
      msg_target: {type: string, required: false, when: "mode=msg_contains"}
    returns: {success: boolean, error?: string}
      
  undo:
    type: git
    description: Undo last AI changes
    accessibility: [user]
    constraints: ["No changes since last AI operation"]
    parameters: {}
    returns: {success: boolean, error?: string}
    
  git_step_back:
    type: git
    description: Move to previous commit
    accessibility: [user]
    behavior: Stashes untracked changes
    parameters: {}
    returns: {success: boolean, stashed_files?: array of strings, error?: string}
    
  git_step_forward:
    type: git
    description: Move to next commit
    accessibility: [user]
    behavior: Attempts to pop stashed changes
    parameters: {}
    returns: {success: boolean, conflicts?: array of strings, error?: string}

# Transaction Management
transaction_model:
  strategy: operation_group
  conflict_detection:
    methods:
      - mtime comparison (fast but unreliable)
      - checksum comparison (slower but accurate)
      - git status check (catches git-tracked changes)
    timing:
      - Check immediately before operation group
      - Check after each write operation
      - Final check before commit
  implementation:
    - Begin: git commit current state
    - Execute: track all operations
    - Validate: check for external modifications
    - Success: git commit with summary
    - Failure: git reset --hard to start
  atomicity: none  # Git operations are NOT atomic at filesystem level
  
# Security Model
security:
  path_validation:
    type: allowlist
    allowed_roots:
      - /home/user/projects
      - /tmp/ai-coder
    blacklist_patterns:
      - .*\.ssh.*
      - .*\.git/config
      - /etc/.*
      - /sys/.*
      - /proc/.*
  canonicalization: required  # Resolve ../ and symlinks before checking
  
# System Configuration
config:
  encoding: utf-8
  line_endings: preserve  # Don't normalize
  max_file_size: 10485760  # 10MB
  git_auto_push: false  # Require explicit push
  commit_message_format: "AI: {operation_summary}"

TODO: |   
  Transaction Safety: The git-based transaction model has race conditions:

    Gap between "git commit" and first operation
    Non-atomic filesystem ops vs git state
=== END FILE: ./unified-design.yaml ===

=== START FILE: ./README.md ===
# 💚 clada
common llm actions desktop actuator

=== END FILE: ./README.md ===

=== START FILE: ./xd5_ref.md ===
# XD5 LLM Quick Reference

## Core Principle
Documentation maintains dependency graphs for deterministic context assembly. Initial dependencies are hypotheses - implementation discovers reality. The STOP protocol ensures documentation evolves to match actual dependencies.

## File Structure
```
<repo>/
└── proj/
    ├── doc/
    │   ├── API.md        # ⚠️ CRITICAL: All dependencies + exports
    │   ├── ABSTRACT.md   # 60-word purpose + 300-word overview
    │   └── ARCH.md       # Technical decisions, constraints
    ├── test-data/        # Test cases as JSON/MD files
    ├── test/             # Minimal harnesses loading test-data
    ├── test-intn/        # Integration tests for dependencies
    ├── src/              # Implementation
    └── comp/             # Sub-components (recursive) - do not need 'proj' dirs
```

## API.md Template
```markdown
# Component: {name}

## Component Type
standard | types-only

## Dependencies
[Provisional - updated via STOP protocol when implementation reveals actual needs]

```yaml
dependencies:
  # Initial hypothesis based on design
  proj/comp/payment:
    functions: [validateCard, processRefund]  # May change
    types: [PaymentResult, CardType]
    errors: [PaymentError]
  
  proj/comp/auth:
    functions: [checkPermission, validateToken]
    types: [User, TokenPayload]
  
  proj/comp/logger:
    functions: [logTransaction]  # Audit requirement
  
  proj/comp/payment-types: "*"  # Wildcard for types-only
  
  external/lodash:
    functions: [groupBy, mapValues]
  
  external/@stripe/stripe-js:
    types: [Stripe, PaymentIntent]
    functions: [loadStripe]
```

## Exports
[Structured YAML for dependency graph tooling, then prose descriptions]

```yaml
exports:
  functions: [functionName1, functionName2]
  types: [Type1, Type2, Type3]
  classes:
    ClassName:
      methods: [method1, method2]
  errors: [CustomError1, CustomError2]
```

### {functionName}
- **Signature**: `{functionName}(param: Type) -> ReturnType`
- **Purpose**: Single sentence.
- **Throws**: `{ErrorType}` when {condition}
- **Test-data**: `test-data/{path}/{functionName}.json`



## Workflow

### Core Flow: Design → Test → Implement

1. **Write docs**: ABSTRACT.md → ARCH.md → API.md (provisional)
2. **Design tests**: E2E hypothesis → Decompose → Unit tests  
3. **Implement**: Discover real dependencies → Update docs → Complete code

### Test Authority & Evolution

**Tests Are Source of Truth (But Not Infallible)**
- Tests define what code SHOULD do
- During debug: ALWAYS fix code to match tests first
- Test errors discovered? Ask human: "I believe test X is incorrect because Y. Should I update it?"
- NEVER auto-modify tests while debugging
- Each test change needs explicit approval

### Detailed Flow

1. **E2E Test Hypothesis** - Write component test-data (expect evolution)
2. **Pseudocode** - Rough implementation to discover structure
3. **Extract Functions** - Identify & extract all pure functions
4. **Unit Tests** - Write test-data for each function
5. **Implement Functions** - Red/green/debug (fix code, not tests)
6. **Revise E2E Tests** - Align with discovered behavior (ask human)
7. **Wire Component** - Connect tested functions
8. **Debug E2E** - Fix code until green

**Debug Protocol**: Test fails? → Try fixing code → Still failing? → Consider test error → Request human approval for any test change

**If docs are wrong**: STOP → Update docs → Update tests → Continue



### Critical Implementation Rules

**Initial Docs Are Hypotheses**: 
- First API.md contains best guesses
- Dependencies WILL be wrong
- This is expected and healthy
- Discovery through implementation is the goal

**🛑 STOP Protocol**: When implementation reveals doc errors:
1. STOP immediately
2. Update API.md/ARCH.md
3. Continue with correct docs

**Test Immutability**: 
- Test harnesses = frozen after creation
- Test data = only change with human approval
- Fix code, not tests (unless explicitly approved)

**Dependency Updates**:
- Add to API.md as discovered
- Include transitive deps if needed for understanding
- External deps must be explicit

## Test Data Format
```json
{
  "cases": [
    {
      "name": "descriptive name",
      "input": [arg1, arg2],
      "expected": {result},
      "throws": "ErrorType"  // optional
    }
  ]
}
```

## Quick Checks

Before implementing:
- [ ] API.md declares all exports?
- [ ] Dependencies section updated?
- [ ] Test data files created?

During implementation:
- [ ] Tests fail first (red phase)?
- [ ] Docs match reality? (if not → STOP)
- [ ] All imports declared in API.md?

## Common Patterns

**Extract pure functions during pseudocode**:
```javascript
// Pseudocode reveals:
// extractedFn: validateInput(x) -> bool
// extractedFn: processData(data) -> result
```

**Types-only components**: No test/ or src/, only doc/

**Path conventions**: All relative to `<repo>/`
- Component: `proj/comp/{name}`
- Nested: `proj/comp/{parent}/comp/{child}`
=== END FILE: ./xd5_ref.md ===

=== START FILE: ./package.json ===
{
  "name": "clada",
  "version": "0.1.0",
  "description": "Common LLM Actions Desktop Actuator",
  "type": "module",
  "engines": {
    "node": ">=20.0.0"
  },
  "scripts": {
    "build": "tsc --noEmit",
    "dev": "tsx watch proj/src/index.ts",
    "start": "tsx proj/src/index.ts",
    "test": "vitest run",
    "test:watch": "vitest watch",
    "test:run": "vitest run",
    "typecheck": "tsc --noEmit",
    "lint": "eslint proj/**/*.ts",
    "lint:fix": "eslint proj/**/*.ts --fix"
  },
  "dependencies": {
    "js-yaml": "^4.1.0",
    "marked": "^12.0.0",
    "nesl-js": "github:nesl-lang/nesl-js"
  },
  "devDependencies": {
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^20.11.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "eslint": "^8.56.0",
    "tsx": "^4.7.0",
    "typescript": "^5.3.3",
    "vitest": "^1.2.0"
  },
  "keywords": [
    "llm",
    "actions",
    "filesystem",
    "sham"
  ],
  "author": "",
  "license": "MIT"
}

=== END FILE: ./package.json ===

=== START FILE: ./.nvmrc ===
20.11.0
=== END FILE: ./.nvmrc ===

=== START FILE: ./scripts/checks/check-marked-types.ts ===
import { marked } from 'marked';
import type * as MarkedTypes from 'marked';

// Try to see what's available
console.log('marked keys:', Object.keys(marked));
console.log('marked.Tokens exists?', 'Tokens' in marked);

// The tokens are likely under a different export
const tokens = marked.lexer('# test\n```js\ncode\n```');
console.log('First token type:', tokens[0]?.type);
console.log('First token constructor:', tokens[0]?.constructor?.name);
=== END FILE: ./scripts/checks/check-marked-types.ts ===

=== START FILE: ./scripts/checks/check-nesl.js ===
import { parseSham } from 'nesl-js';
import * as nesl from 'nesl-js';

console.log('nesl-js exports:', Object.keys(nesl));
console.log('\nparseSham type:', typeof parseSham);

const result = parseSham(`#!SHAM [@three-char-SHA-256: abc]
action = "test"
#!END_SHAM_abc`);

console.log('\nResult:', JSON.stringify(result, null, 2));
console.log('\nResult type:', typeof result);
console.log('Result constructor:', result?.constructor?.name);
console.log('Blocks type:', Array.isArray(result?.blocks) ? 'array' : typeof result?.blocks);
=== END FILE: ./scripts/checks/check-nesl.js ===

=== START FILE: ./scripts/checks/check-marked.js ===
import { marked } from 'marked';

const md = `# Test
\`\`\`js
code here
\`\`\`
`;

const tokens = marked.lexer(md);
console.log('Token types:', tokens.map(t => ({
  type: t.type,
  hasText: 'text' in t,
  props: Object.keys(t)
})));
=== END FILE: ./scripts/checks/check-marked.js ===

=== START FILE: ./tsconfig.json ===
{
  "compilerOptions": {
    // Modern output settings
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "lib": ["ES2022"],
    
    // Strict type checking
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    
    // Additional checks
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    
    // Output settings
    "outDir": "./dist",
    "rootDir": ".",
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    
    // Module resolution
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true,
    
    // Path mapping for cleaner imports
    "baseUrl": "."
  },
  "include": [
    "proj/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/test/**",
    "**/test-data/**"
  ]
}
=== END FILE: ./tsconfig.json ===

=== START FILE: ./replacer_llm_instructions.md ===
coding style guide:  TDD.  self documenting code.  every api  function name should make it super obvious who is doing what and why

WOL = "words or less, please"

keep the docs as lean

refactor code to make it smaller whenever possible.  DRY.

IMPORTANT:  do not generate edit instructions unless specifically asked to.  not necessary when just discussing and brainstorming

- all code functions and classes or large (10 lines of code or more?) need code comments to cocnisely and lcearly describe what they're doing and why and how

IMPORTANT: 

whenever you generate new code, use the following format.  dont just generate a standalone artifact.  when generating one or multiple new files, use the OVERWRITE pattern shown below 

For each specific edit that needs to happen, list a brief explanation for the change, list file name, and then explicitly make it clear what the target text is that need to be changed, and then the replacement text is that will replace it. Each of those blocks of text or code need to be explicit verbatim character by character Perfect matches for the intended text.  be sure to put the filenames and expalanations on their own lines for easy human reading even in output format.  like paragraph breaks before and after so thye're on their own lines even when not in code blocks.  use this format below exactly. note that the OVERWRITE style block can be used to create new files and its parent dirs.

make the search find text or code blocks as small as possible to still be unique identifiers for what needs to be changed in the underlying files 

for the file path, use as much of the path that you know of.  should be as specific as you can accurately be.  

make sure that file paths include the current main project dir

<<<EXPLANATION>>>

this is why the change should happen

<<<FILE>>>

package/replacer_demo_src/main.py

<<<SEARCH>>>
def old_function():
   x = 1
   y = 2
   return x + y
<<<REPLACE>>>
def new_function():
   result = 3
   return result
<<<END>>>




<<<EXPLANATION>>>

this is why this change should happen

<<<FILE>>>
july/coding/bobstuff/react/config/settings.json
<<<OVERWRITE>>>
{
   "debug": true,
   "port": 8080
}
<<<END>>>

NOTE: if you want to remove a section of code, your replace block must contain a blank line and a space:


<<<EXPLANATION>>>

remove the search code

<<<FILE>>>

package/replacer_demo_src/main.py

<<<SEARCH>>>
def old_function():
   x = 1
   y = 2
   return x + y
<<<REPLACE>>>
 
<<<END>>>

see how the REPLACE block can never be totally empty. must contain blank line and whitespace (space(s)) too

IMPORTANT:  each edit item must list its associated FILE.  each SEARCH/REPLACE or OVERWRITE etc block must be immediately preceeded by the respective file 

$$$$$$$$$$$$$

Prioritize substance, clarity, and depth. Challenge all my proposals, designs, and conclusions as hypotheses to be tested. Sharpen follow-up questions for precision, surfacing hidden assumptions, trade offs, and failure modes early. Default to terse, logically structured, information-dense responses unless detailed exploration is required. Skip unnecessary praise unless grounded in evidence. Explicitly acknowledge uncertainty when applicable. Always propose at least one alternative framing. Accept critical debate as normal and preferred. Treat all factual claims as provisional unless cited or clearly justified. Cite when appropriate. Acknowledge when claims rely on inference or incomplete information. Favor accuracy over sounding certain.

check anything online when it feels relevant.  good to compare our thoughts/assumptions with what other people are actually doing and thinking

when asked to share your thoughts (like if user says "wdyt"), then walk it out and talk it out gradually, incrementally, slowly, and thoughtfully.  challenge me so we can succeed overall

dont fall into the trap of equating "implementation" with "low-level".  implementation decisions can be high-level when they affect the system's fundamental behavior


IMPORTANT EDIT INSTRUCTIONS NOTE:

always use full absolute file paths for edit instructions

make the search and replace blocks each as small as possible to still do the unique edit correctly

=== END FILE: ./replacer_llm_instructions.md ===

=== START FILE: ./eslint.config.js ===
import js from '@eslint/js';
import typescript from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';

export default [
  js.configs.recommended,
  {
    files: ['**/*.ts'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        project: './tsconfig.json',
        ecmaVersion: 'latest',
        sourceType: 'module'
      }
    },
    plugins: {
      '@typescript-eslint': typescript
    },
    rules: {
      ...typescript.configs.recommended.rules,
      '@typescript-eslint/explicit-function-return-type': 'error',
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/consistent-type-imports': 'error',
      '@typescript-eslint/no-non-null-assertion': 'error'
    }
  }
];
=== END FILE: ./eslint.config.js ===

=== START FILE: ./vitest.config.ts ===
import { defineConfig } from 'vitest/config';
import path from 'path';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    include: ['proj/**/*.test.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'proj/test/',
        '**/*.test.ts'
      ]
    }
  },
  resolve: {
    alias: {}
  }
});
=== END FILE: ./vitest.config.ts ===
