
=== START FILE: ./proj/test-data/execute.md ===
# Execute Tests

## basic operations

### 001-single-file-create

```sh sham
#!SHAM [@three-char-SHA-256: abc]
action = "file_write"
path = "/tmp/test.txt"
content = "hello world"
#!END_SHAM_abc
```

```json
{
  "success": true,
  "totalBlocks": 1,
  "executedActions": 1,
  "results": [{
    "seq": 1,
    "blockId": "abc",
    "action": "file_write",
    "params": {
      "action": "file_write",
      "path": "/tmp/test.txt",
      "content": "hello world"
    },
    "success": true
  }],
  "parseErrors": []
}
```

### 002-multiple-blocks-mixed-success

```sh sham
#!SHAM [@three-char-SHA-256: f1r]
action = "file_write"
path = "/tmp/first.txt"
content = "first"
#!END_SHAM_f1r

Some text between blocks

#!SHAM [@three-char-SHA-256: s3c]
action = "file_write"
path = "/tmp/nonexistent/second.txt"
content = "fails"
#!END_SHAM_s3c
```

```json
{
  "success": false,
  "totalBlocks": 2,
  "executedActions": 2,
  "results": [{
    "seq": 1,
    "blockId": "f1r",
    "action": "file_write",
    "params": {
      "action": "file_write",
      "path": "/tmp/first.txt",
      "content": "first"
    },
    "success": true
  }, {
    "seq": 2,
    "blockId": "s3c",
    "action": "file_write",
    "params": {
      "action": "file_write",
      "path": "/tmp/nonexistent/second.txt",
      "content": "fails"
    },
    "success": false,
    "error": "ENOENT: no such file or directory"
  }],
  "parseErrors": []
}
```

## error handling

### 003-invalid-action

```sh sham
#!SHAM [@three-char-SHA-256: inv]
action = "invalid_action"
path = "/tmp/test.txt"
#!END_SHAM_inv
```

```json
{
  "success": false,
  "totalBlocks": 1,
  "executedActions": 0,
  "results": [{
    "seq": 1,
    "blockId": "inv",
    "action": "invalid_action",
    "params": {
      "action": "invalid_action",
      "path": "/tmp/test.txt"
    },
    "success": false,
    "error": "Unknown action: invalid_action"
  }],
  "parseErrors": []
}
```

### 004-parser-error-continues

```sh sham
#!SHAM [@three-char-SHA-256: dup]
key = "first"
key = "second"
#!END_SHAM_dup

#!SHAM [@three-char-SHA-256: ok]
action = "file_write"
path = "/tmp/after-error.txt"
content = "should work"
#!END_SHAM_ok
```

```json
{
  "success": false,
  "totalBlocks": 2,
  "executedActions": 1,
  "results": [{
    "seq": 1,
    "blockId": "ok",
    "action": "file_write",
    "params": {
      "action": "file_write",
      "path": "/tmp/after-error.txt",
      "content": "should work"
    },
    "success": true
  }],
  "parseErrors": [{
    "blockId": "dup",
    "error": {
      "code": "DUPLICATE_KEY",
      "message": "Duplicate key 'key' in block 'dup'"
    }
  }]
}
```

## command execution

### 005-exec-bash

```sh sham
#!SHAM [@three-char-SHA-256: cmd]
action = "exec"
code = "echo 'hello from shell'"
lang = "bash"
#!END_SHAM_cmd
```

```json
{
  "success": true,
  "totalBlocks": 1,
  "executedActions": 1,
  "results": [{
    "seq": 1,
    "blockId": "cmd",
    "action": "exec",
    "params": {
      "action": "exec",
      "code": "echo 'hello from shell'",
      "lang": "bash"
    },
    "success": true,
    "data": {
      "stdout": "hello from shell\n",
      "stderr": "",
      "exit_code": 0
    }
  }],
  "parseErrors": []
}
```
=== END FILE: ./proj/test-data/execute.md ===

=== START FILE: ./proj/comp/sham-action-parser/test/parseShamResponse.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { marked, Token } from 'marked';
import { parseShamResponse } from '../src/index';

const testPath = join(__dirname, '../test-data/parseShamResponse.md');
const mdContent = readFileSync(testPath, 'utf8');

const tokens: Token[] = marked.lexer(mdContent);
const codeBlocks = tokens.filter(t => t.type === 'code') as Array<Token & {type: 'code', text: string}>;
const testNames = tokens
  .filter(t => t.type === 'heading' && 'depth' in t && t.depth === 3)
  .map(t => (t as any).text as string);

describe('parseShamResponse', () => {
  testNames.forEach((name, i) => {
    const baseIndex = i * 2;
    it(name, async () => {
      const input = codeBlocks[baseIndex].text;
      const expected = JSON.parse(codeBlocks[baseIndex + 1].text);
      const result = await parseShamResponse(input);
      expect(result).toEqual(expected);
    });
  });
});
=== END FILE: ./proj/comp/sham-action-parser/test/parseShamResponse.test.ts ===

=== START FILE: ./proj/comp/sham-action-parser/test/validateShamBlock.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { validateShamBlock } from '../src/index';

const testData = JSON.parse(
  readFileSync(join(__dirname, '../test-data/validateShamBlock.json'), 'utf8')
);

describe('validateShamBlock', () => {
  testData.cases.forEach(({ name, input, expected }) => {
    it(name, () => {
      const [block, actionSchema] = input;
      const result = validateShamBlock(block, actionSchema);
      expect(result).toEqual(expected);
    });
  });
});
=== END FILE: ./proj/comp/sham-action-parser/test/validateShamBlock.test.ts ===

=== START FILE: ./proj/comp/sham-action-parser/test/transformToAction.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { transformToAction, TransformError } from '../src/index';

const testData = JSON.parse(
  readFileSync(join(__dirname, '../test-data/transformToAction.json'), 'utf8')
);

describe('transformToAction', () => {
  testData.cases.forEach(({ name, input, expected, throws }) => {
    it(name, () => {
      const [block, actionDef] = input;
      if (throws) {
        expect(() => transformToAction(block, actionDef)).toThrow(TransformError);
      } else {
        const result = transformToAction(block, actionDef);
        expect(result).toEqual(expected);
      }
    });
  });
});
=== END FILE: ./proj/comp/sham-action-parser/test/transformToAction.test.ts ===

=== START FILE: ./proj/comp/sham-action-parser/test-data/validateShamBlock.json ===
{
  "cases": [
    {
      "name": "valid file_write block",
      "input": [
        {
          "id": "abc",
          "properties": {
            "action": "file_write",
            "path": "/tmp/test.txt",
            "content": "hello"
          }
        },
        {
          "type": "write",
          "description": "Create new file",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "content": {"type": "string", "required": true}
          }
        }
      ],
      "expected": {
        "valid": true,
        "actionType": "file_write",
        "errors": []
      }
    },
    {
      "name": "missing action field",
      "input": [
        {
          "id": "bad",
          "properties": {
            "path": "/tmp/test.txt",
            "content": "hello"
          }
        },
        null
      ],
      "expected": {
        "valid": false,
        "errors": ["Missing 'action' field in SHAM block"]
      }
    },
    {
      "name": "unknown action type",
      "input": [
        {
          "id": "unk",
          "properties": {
            "action": "not_real_action",
            "path": "/tmp/test.txt"
          }
        },
        null
      ],
      "expected": {
        "valid": false,
        "errors": ["Unknown action: not_real_action"]
      }
    },
    {
      "name": "missing required parameter",
      "input": [
        {
          "id": "miss",
          "properties": {
            "action": "file_write",
            "path": "/tmp/test.txt"
          }
        },
        {
          "type": "write",
          "description": "Create new file",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "content": {"type": "string", "required": true}
          }
        }
      ],
      "expected": {
        "valid": false,
        "errors": ["Missing required parameter: content"]
      }
    }
  ]
}
=== END FILE: ./proj/comp/sham-action-parser/test-data/validateShamBlock.json ===

=== START FILE: ./proj/comp/sham-action-parser/test-data/transformToAction.json ===
{
  "cases": [
    {
      "name": "simple string parameters",
      "input": [
        {
          "id": "str",
          "properties": {
            "action": "file_write",
            "path": "/tmp/test.txt",
            "content": "hello world"
          },
          "startLine": 1,
          "endLine": 5
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "content": {"type": "string", "required": true}
          }
        }
      ],
      "expected": {
        "action": "file_write",
        "parameters": {
          "path": "/tmp/test.txt",
          "content": "hello world"
        },
        "metadata": {
          "blockId": "str",
          "startLine": 1,
          "endLine": 5
        }
      }
    },
    {
      "name": "with SHAM annotation",
      "input": [
        {
          "id": "ann",
          "properties": {
            "action": "file_delete",
            "path": "/tmp/remove.txt",
            "@three-char-SHA-256": "abc"
          },
          "startLine": 10,
          "endLine": 13
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"}
          }
        }
      ],
      "expected": {
        "action": "file_delete",
        "parameters": {
          "path": "/tmp/remove.txt"
        },
        "metadata": {
          "blockId": "ann",
          "startLine": 10,
          "endLine": 13
        }
      }
    },
    {
      "name": "integer parameter conversion",
      "input": [
        {
          "id": "int",
          "properties": {
            "action": "file_replace_all_text",
            "path": "/tmp/edit.txt",
            "old_text": "foo",
            "new_text": "bar",
            "count": "3"
          },
          "startLine": 1,
          "endLine": 7
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true, "format": "absolute_path"},
            "old_text": {"type": "string", "required": true},
            "new_text": {"type": "string", "required": true},
            "count": {"type": "integer", "required": false}
          }
        }
      ],
      "expected": {
        "action": "file_replace_all_text",
        "parameters": {
          "path": "/tmp/edit.txt",
          "old_text": "foo",
          "new_text": "bar",
          "count": 3
        },
        "metadata": {
          "blockId": "int",
          "startLine": 1,
          "endLine": 7
        }
      }
    },
    {
      "name": "enum parameter validation",
      "input": [
        {
          "id": "enum",
          "properties": {
            "action": "exec",
            "code": "print(1)",
            "lang": "python"
          },
          "startLine": 5,
          "endLine": 9
        },
        {
          "type": "dynamic",
          "parameters": {
            "code": {"type": "string", "required": true},
            "lang": {"type": "enum", "values": ["python", "javascript", "bash", "ruby"], "required": true}
          }
        }
      ],
      "expected": {
        "action": "exec",
        "parameters": {
          "code": "print(1)",
          "lang": "python"
        },
        "metadata": {
          "blockId": "enum",
          "startLine": 5,
          "endLine": 9
        }
      }
    },
    {
      "name": "invalid integer throws",
      "input": [
        {
          "id": "bad",
          "properties": {
            "action": "file_replace_all_text",
            "path": "/tmp/edit.txt",
            "old_text": "foo",
            "new_text": "bar",
            "count": "not-a-number"
          },
          "startLine": 1,
          "endLine": 7
        },
        {
          "type": "write",
          "parameters": {
            "path": {"type": "string", "required": true},
            "old_text": {"type": "string", "required": true},
            "new_text": {"type": "string", "required": true},
            "count": {"type": "integer", "required": false}
          }
        }
      ],
      "throws": "TransformError"
    }
  ]
}
=== END FILE: ./proj/comp/sham-action-parser/test-data/transformToAction.json ===

=== START FILE: ./proj/comp/sham-action-parser/test-data/parseShamResponse.md ===
# Tests

## general

### 001-single-valid-file-create-action

```sh sham
#!SHAM [@three-char-SHA-256: abc]
action = "file_write"
path = "/tmp/test.txt"
content = <<'EOT_SHAM_abc'
Hello world!
EOT_SHAM_abc
#!END_SHAM_abc
````

```json
{
  "actions": [{
    "action": "file_write",
    "parameters": {
      "path": "/tmp/test.txt",
      "content": "Hello world!"
    },
    "metadata": {
      "blockId": "abc",
      "startLine": 1,
      "endLine": 7
    }
  }],
  "errors": [],
  "summary": {
    "totalBlocks": 1,
    "successCount": 1,
    "errorCount": 0
  }
}
```

---

### 002-multiple-blocks-with-one-invalid

```sh sham
#!SHAM [@three-char-SHA-256: gd1]
action = "file_write"
path = "/tmp/good.txt"
content = "valid"
#!END_SHAM_gd1

#!SHAM [@three-char-SHA-256: bad]
action = "unknown_action"
path = "/tmp/bad.txt"
#!END_SHAM_bad
```

```json
{
  "actions": [{
    "action": "file_write",
    "parameters": {
      "path": "/tmp/good.txt",
      "content": "valid"
    },
    "metadata": {
      "blockId": "gd1",
      "startLine": 1,
      "endLine": 5
    }
  }],
  "errors": [{
    "blockId": "bad",
    "action": "unknown_action",
    "errorType": "validation",
    "message": "Unknown action: unknown_action",
    "blockStartLine": 7,
    "shamContent": "#!SHAM [@three-char-SHA-256: bad]\naction = \"unknown_action\"\npath = \"/tmp/bad.txt\"\n#!END_SHAM_bad"
  }],
  "summary": {
    "totalBlocks": 2,
    "successCount": 1,
    "errorCount": 1
  }
}
```

---

### 003-missing-required-parameter

```sh sham
#!SHAM [@three-char-SHA-256: mis]
action = "file_write"
content = "missing path"
#!END_SHAM_mis
```

```json
{
  "actions": [],
  "errors": [{
    "blockId": "mis",
    "action": "file_write",
    "errorType": "validation",
    "message": "Missing required parameter: path",
    "blockStartLine": 1,
    "shamContent": "#!SHAM [@three-char-SHA-256: mis]\naction = \"file_write\"\ncontent = \"missing path\"\n#!END_SHAM_mis"
  }],
  "summary": {
    "totalBlocks": 1,
    "successCount": 0,
    "errorCount": 1
  }
}
```

---

### 004-type-conversion-with-boolean-and-integer

```sh sham
#!SHAM [@three-char-SHA-256: typ]
action = "exec"
code = "print('hi')"
lang = "python"
cwd = "/tmp"
#!END_SHAM_typ
```

```json
{
  "actions": [{
    "action": "exec",
    "parameters": {
      "code": "print('hi')",
      "lang": "python",
      "cwd": "/tmp"
    },
    "metadata": {
      "blockId": "typ",
      "startLine": 1,
      "endLine": 6
    }
  }],
  "errors": [],
  "summary": {
    "totalBlocks": 1,
    "successCount": 1,
    "errorCount": 0
  }
}
```

=== END FILE: ./proj/comp/sham-action-parser/test-data/parseShamResponse.md ===

=== START FILE: ./proj/comp/sham-action-parser/doc/API.md ===
# Component: sham-action-parser

## Component Type
standard

## Documentation Debt
[Must be empty before implementation]

## Dependencies
[Provisional - updated via STOP protocol when implementation reveals actual needs]

```yaml
dependencies:
  external/nesl-js:
    functions: [parseSham]
    types: [Block, ParseResult, ParseError]
  
  external/js-yaml:
    functions: [load]
    types: []
  
  node:fs/promises:
    functions: [readFile]
    types: []
  
  node:path:
    functions: [resolve, join]
    types: []
```

## Exports
```yaml
exports:
  functions: [parseShamResponse, validateShamBlock, transformToAction]
  types: [ParseResult, CladaAction, ParseError, ValidationResult, TransformError]
  errors: [TransformError]
```

### parseShamResponse
- **Signature**: `parseShamResponse(shamText: string) -> Promise<ParseResult>`
- **Purpose**: Parse SHAM blocks from text into validated clada actions.
- **Test-data**: `test-data/parseShamResponse.json`

### validateShamBlock
- **Signature**: `validateShamBlock(block: ShamBlock, actionSchema: ActionDefinition) -> ValidationResult`
- **Purpose**: Validate a single SHAM block against action schema.
- **Test-data**: `test-data/validateShamBlock.json`

### transformToAction
- **Signature**: `transformToAction(block: ShamBlock, actionDef: ActionDefinition) -> CladaAction`
- **Purpose**: Transform validated SHAM block into typed clada action.
- **Throws**: `TransformError` when type conversion fails
- **Test-data**: `test-data/transformToAction.json`

## Internal Functions
[Discovered during implementation - not exported]

### loadActionSchema
- **Signature**: `loadActionSchema() -> Promise<Map<string, ActionDefinition>>`
- **Purpose**: Load and parse unified-design.yaml action definitions.

### parseBoolean
- **Signature**: `parseBoolean(value: string) -> boolean`
- **Purpose**: Convert string "true"/"false" to boolean.

### parseInteger  
- **Signature**: `parseInteger(value: string) -> number`
- **Purpose**: Convert numeric string to integer.
- **Throws**: `TransformError` when not a valid integer

### validateAbsolutePath
- **Signature**: `validateAbsolutePath(path: string) -> boolean`
- **Purpose**: Check if string is valid absolute path.

### validateEnum
- **Signature**: `validateEnum(value: string, allowed: string[]) -> boolean`
- **Purpose**: Check if value is in allowed enum values.

## Types

### ParseResult
```typescript
{
  actions: CladaAction[]      // Successfully parsed actions
  errors: ParseError[]        // All errors encountered
  summary: {
    totalBlocks: number
    successCount: number
    errorCount: number
  }
}
```

### CladaAction
```typescript
{
  action: string              // Action name from unified-design
  parameters: Record<string, any>  // Typed parameters
  metadata: {
    blockId: string          // SHAM block ID
    startLine: number
    endLine: number
  }
}
```

### ParseError
```typescript
{
  blockId: string            // Which SHAM block failed
  errorType: 'syntax' | 'validation' | 'type'
  message: string            // Specific error details
  blockStartLine?: number    // Starting line of the SHAM block
  shamContent?: string       // Original SHAM block for context
}
```

### ValidationResult
```typescript
{
  valid: boolean
  actionType?: string        // Identified action if valid
  errors?: string[]          // Validation errors if invalid
}
```

### TransformError
```typescript
class TransformError extends Error {
  parameterName: string
  expectedType: string
  actualValue: string
}
```

### ActionDefinition
```typescript
{
  type: 'read' | 'write' | 'meta' | 'git' | 'dynamic'
  description: string
  parameters: Record<string, ParameterDef>
  returns: Record<string, any>
}
```

### ParameterDef
```typescript
{
  type: string              // 'string' | 'integer' | 'boolean' | 'enum'
  required: boolean
  format?: string           // e.g. 'absolute_path'
  values?: string[]         // for enum type
  default?: any
}
```
=== END FILE: ./proj/comp/sham-action-parser/doc/API.md ===

=== START FILE: ./proj/comp/sham-action-parser/doc/ABSTRACT.md ===
# SHAM Action Parser

Parses SHAM blocks from LLM responses into validated clada action objects, executing as many valid actions as possible while collecting errors for failed blocks.

## Overview

This component bridges between LLM-generated SHAM syntax and clada's action system. It processes text containing SHAM blocks, validates each block independently against clada's action schema, and transforms valid blocks into executable action objects. The parser is intentionally permissive - it processes all blocks and collects both successes and failures, allowing clada to execute valid actions while reporting specific errors back to the LLM for correction. This design minimizes expensive LLM regeneration by salvaging partial success from responses containing some malformed blocks.

The parser handles:
- SHAM syntax parsing via nesl-js
- Action type validation against unified-design schema  
- Parameter presence and type checking
- String-to-type conversions (booleans, integers, paths)
- Comprehensive error collection with block context
- Preservation of SHAM metadata (IDs, line numbers)

This approach enables efficient LLM-clada interaction by providing detailed feedback on exactly which actions failed and why, allowing targeted corrections rather than full regeneration.
=== END FILE: ./proj/comp/sham-action-parser/doc/ABSTRACT.md ===

=== START FILE: ./proj/comp/sham-action-parser/doc/ARCH.md ===
# SHAM Action Parser - Architecture

## Design Philosophy

**Maximize Execution, Minimize Regeneration**: Parse and validate each SHAM block independently. Execute all valid actions while collecting detailed errors for invalid ones. This avoids expensive LLM token usage for full response regeneration.

## Processing Pipeline

1. **SHAM Parsing** (via nesl-js)
   - Input: Raw text with SHAM blocks
   - Output: Parsed blocks with string properties
   - Preserves: Block IDs, line numbers, raw content

2. **Action Validation** (per block)
   - Validate `action` field exists and matches known clada actions
   - Check required parameters for specific action type
   - Continue processing even if some blocks fail

3. **Type Transformation** (per valid block)
   - Convert string values to appropriate types
   - Validate constraints (path formats, enum values, etc.)
   - Preserve original SHAM metadata

4. **Result Aggregation**
   - Collect all successful action objects
   - Collect all errors with context
   - Return comprehensive ParseResult

## Error Handling Strategy

Each block processed independently with errors collected in structured format:
- `blockId`: SHAM block identifier
- `blockStartLine`: Starting line number of the SHAM block in original text
- `errorType`: Category (syntax, validation, type)
- `message`: Specific error details
- `shamContent`: Original SHAM block for LLM reference

## Type Conversions

All SHAM values are strings, requiring conversion:
- **Booleans**: "true"/"false" → boolean
- **Integers**: Numeric strings → number
- **Paths**: Validate absolute path format
- **Enums**: Validate against allowed values
- **Arrays**: Not supported in SHAM (would need special syntax)

## Action Mapping

SHAM actions map directly to clada tool names from unified-design.yaml:
- Must use exact tool names (e.g., `file_write`, not `write_file`)
- No aliasing or fuzzy matching to avoid ambiguity

## Constraints

- SHAM doesn't support complex types (objects, arrays)
- All values are strings requiring parsing
- No nested structures
- Heredoc strings preserve internal formatting

## Dependencies on Other Components

- Requires action schema definitions (types, required params)
- Will need shared error types with response formatter
- Path validation utilities
=== END FILE: ./proj/comp/sham-action-parser/doc/ARCH.md ===

=== START FILE: ./proj/comp/sham-action-parser/src/transformToAction.ts ===
import { CladaAction, TransformError, ActionDefinition } from './types.js';
import type { Block } from 'nesl-js';

/**
 * Transform validated SHAM block into typed clada action
 * Converts string values to proper types based on schema
 */
export function transformToAction(
  block: Block,
  actionDef: ActionDefinition
): CladaAction {
  const action = block.properties.action;
  if (!action) {
    throw new TransformError(
      'Block missing action property',
      'action',
      'string',
      'undefined'
    );
  }
  const parameters: Record<string, any> = {};

  // Process each parameter defined in the schema
  for (const [paramName, paramDef] of Object.entries(actionDef.parameters || {})) {
    // Skip if parameter not provided and has a default
    if (!(paramName in block.properties)) {
      if ('default' in paramDef) {
        parameters[paramName] = paramDef.default;
      }
      continue;
    }

    const rawValue = block.properties[paramName];
    
    // Skip if value is undefined (shouldn't happen if we got here, but TypeScript needs this)
    if (rawValue === undefined) {
      continue;
    }

    try {
      // Convert based on parameter type
      switch (paramDef.type) {
        case 'string':
          parameters[paramName] = rawValue;
          // Validate format if specified
          if (paramDef.format === 'absolute_path' && !validateAbsolutePath(rawValue)) {
            throw new TransformError(
              `Invalid absolute path: ${rawValue}`,
              paramName,
              'absolute_path',
              rawValue
            );
          }
          break;

        case 'integer':
          parameters[paramName] = parseInteger(rawValue);
          break;

        case 'boolean':
          parameters[paramName] = parseBoolean(rawValue);
          break;

        case 'enum':
          if (!paramDef.values || !paramDef.values.includes(rawValue)) {
            throw new TransformError(
              `Invalid enum value: ${rawValue}. Allowed: ${paramDef.values?.join(', ')}`,
              paramName,
              'enum',
              rawValue
            );
          }
          parameters[paramName] = rawValue;
          break;

        default:
          // Default to string for unknown types
          parameters[paramName] = rawValue;
      }
    } catch (error) {
      if (error instanceof TransformError) {
        // Update parameter name in error
        error.parameterName = paramName;
        throw error;
      }
      throw new TransformError(
        `Failed to transform parameter ${paramName}: ${error}`,
        paramName,
        paramDef.type,
        rawValue
      );
    }
  }

  return {
    action,
    parameters,
    metadata: {
      blockId: block.id,
      startLine: block.startLine,
      endLine: block.endLine ?? block.startLine // Use startLine if endLine is null
    }
  };
}

// Helper functions for type conversion and validation

function parseBoolean(value: string): boolean {
  if (value === 'true') return true;
  if (value === 'false') return false;
  throw new TransformError(
    `Invalid boolean value: ${value}`,
    'unknown',
    'boolean',
    value
  );
}

function parseInteger(value: string): number {
  const num = parseInt(value, 10);
  if (isNaN(num) || num.toString() !== value.trim()) {
    throw new TransformError(
      `Invalid integer value: ${value}`,
      'unknown',
      'integer',
      value
    );
  }
  return num;
}

function validateAbsolutePath(path: string): boolean {
  // Unix/Linux/Mac absolute paths start with /
  // Windows absolute paths like C:\ or \\server\share
  return /^(\/|[A-Za-z]:\\|\\\\)/.test(path);
}
=== END FILE: ./proj/comp/sham-action-parser/src/transformToAction.ts ===

=== START FILE: ./proj/comp/sham-action-parser/src/types.ts ===
export interface ParseResult {
  actions: CladaAction[];
  errors: ParseError[];
  summary: {
    totalBlocks: number;
    successCount: number;
    errorCount: number;
  };
}

export interface CladaAction {
  action: string;
  parameters: Record<string, any>;
  metadata: {
    blockId: string;
    startLine: number;
    endLine: number;
  };
}

export interface ParseError {
  blockId: string;
  action?: string;
  errorType: 'syntax' | 'validation' | 'type';
  message: string;
  blockStartLine?: number;
  shamContent?: string;
}

export interface ValidationResult {
  valid: boolean;
  actionType?: string;
  errors?: string[];
}

export class TransformError extends Error {
  constructor(
    message: string,
    public parameterName: string,
    public expectedType: string,
    public actualValue: string
  ) {
    super(message);
    this.name = 'TransformError';
  }
}

export interface ActionDefinition {
  type: 'read' | 'write' | 'meta' | 'git' | 'dynamic';
  description: string;
  parameters: Record<string, ParameterDef>;
  returns?: Record<string, any>;
}

export interface ParameterDef {
  type: string;
  required: boolean;
  format?: string;
  values?: string[];
  default?: any;
}
=== END FILE: ./proj/comp/sham-action-parser/src/types.ts ===

=== START FILE: ./proj/comp/sham-action-parser/src/validateShamBlock.ts ===
import { ValidationResult, ActionDefinition } from './types.js';
import type { Block } from 'nesl-js';

/**
 * Validate a single SHAM block against action schema
 * Checks action exists and required params present
 */
export function validateShamBlock(
  block: Block,
  actionSchema: ActionDefinition | null
): ValidationResult {
  // Check if block has properties object
  if (!block.properties) {
    return {
      valid: false,
      errors: ['Block missing properties object']
    };
  }

  // Check if action field exists
  if (!block.properties.action) {
    return {
      valid: false,
      errors: ['Missing \'action\' field in SHAM block']
    };
  }

  const actionType = block.properties.action;

  // If no schema provided, it's an unknown action
  if (!actionSchema) {
    return {
      valid: false,
      errors: [`Unknown action: ${actionType}`]
    };
  }

  // Check all required parameters are present
  const errors: string[] = [];
  
  if (actionSchema.parameters) {
    for (const [paramName, paramDef] of Object.entries(actionSchema.parameters)) {
      if (paramDef.required && !(paramName in block.properties)) {
        errors.push(`Missing required parameter: ${paramName}`);
      }
    }
  }

  if (errors.length > 0) {
    return {
      valid: false,
      errors
    };
  }

  return {
    valid: true,
    actionType,
    errors: []
  };
}
=== END FILE: ./proj/comp/sham-action-parser/src/validateShamBlock.ts ===

=== START FILE: ./proj/comp/sham-action-parser/src/index.ts ===
/**
 * SHAM Action Parser - Parses SHAM blocks into validated clada actions
 */

import { ParseResult, CladaAction, ParseError, ValidationResult, TransformError, ActionDefinition } from './types.js';
import { validateShamBlock } from './validateShamBlock.js';
import { transformToAction } from './transformToAction.js';
import { parseSham, type Block, type ParseResult as NeslParseResult } from 'nesl-js';
import { load as loadYaml } from 'js-yaml';
import { readFile } from 'fs/promises';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Re-export types for consumers
export { ParseResult, CladaAction, ParseError, ValidationResult, TransformError };

// Cache for action schema
let actionSchemaCache: Map<string, ActionDefinition> | null = null;

/**
 * Parse SHAM blocks from text into validated clada actions
 * Processes all blocks, collecting successes and errors
 */
export async function parseShamResponse(shamText: string): Promise<ParseResult> {
  console.log('[parseShamResponse] Starting with text length:', shamText.length);
  const actions: CladaAction[] = [];
  const errors: ParseError[] = [];

  // Parse SHAM blocks using nesl-js
  let parseResult: NeslParseResult;
  try {
    console.log('[parseShamResponse] About to call parseSham...');
    parseResult = parseSham(shamText);
    console.log('[parseShamResponse] parseSham returned:', parseResult);
    
    // Handle case where parseSham returns undefined or null
    if (!parseResult) {
      parseResult = { blocks: [], errors: [] };
    }
  } catch (error) {
    return {
      actions: [],
      errors: [{
        blockId: 'unknown',
        errorType: 'syntax',
        message: `Failed to parse SHAM: ${error}`,
        shamContent: shamText
      }],
      summary: {
        totalBlocks: 0,
        successCount: 0,
        errorCount: 1
      }
    };
  }

  // Load action schema
  const actionSchema = await loadActionSchema();

  // Process each SHAM block
  const blocks = parseResult.blocks || [];
  
  // If no blocks found, return empty result
  if (blocks.length === 0) {
    return {
      actions: [],
      errors: [],
      summary: {
        totalBlocks: 0,
        successCount: 0,
        errorCount: 0
      }
    };
  }
  
  for (const block of blocks) {
    const blockId = block.id || 'unknown';
    console.log('[parseShamResponse] Processing block', blockId, 'with properties:', block.properties);
    
    try {
      // Get action type from block
      const actionType = block.properties?.action;
      const actionDef = actionType ? actionSchema.get(actionType) : undefined;

      // Validate block
      const validation = validateShamBlock(block, actionDef ?? null);
      
      if (!validation.valid) {
        errors.push({
          blockId,
          action: actionType,
          errorType: 'validation',
          message: validation.errors?.[0] || 'Validation failed',
          blockStartLine: block.startLine,
          shamContent: reconstructShamBlock(block)
        });
        continue;
      }

      // Transform to action
      try {
        const action = transformToAction(block, actionDef!);
        actions.push(action);
      } catch (error) {
        if (error instanceof TransformError) {
          errors.push({
            blockId,
            action: actionType,
            errorType: 'type',
            message: error.message,
            blockStartLine: block.startLine,
            shamContent: reconstructShamBlock(block)
          });
        } else {
          throw error;
        }
      }
    } catch (error) {
      errors.push({
        blockId,
        action: block.properties?.action,
        errorType: 'validation',
        message: `Unexpected error: ${error}`,
        blockStartLine: block.startLine,
        shamContent: reconstructShamBlock(block)
      });
    }
  }

  const result = {
    actions,
    errors,
    summary: {
      totalBlocks: blocks.length,
      successCount: actions.length,
      errorCount: errors.length
    }
  };
  console.log('[parseShamResponse] Returning result with', result.actions.length, 'actions and', result.errors.length, 'errors');
  return result;
}

/**
 * Load and cache action definitions from unified-design.yaml
 */
async function loadActionSchema(): Promise<Map<string, ActionDefinition>> {
  console.log('[loadActionSchema] Called, cache exists?', !!actionSchemaCache);
  if (actionSchemaCache) {
    return actionSchemaCache;
  }

  // Get the directory of this module
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);
  
  // Navigate to project root and find unified-design.yaml
  const yamlPath = join(__dirname, '../../../../unified-design.yaml');
  console.log('[loadActionSchema] Attempting to load from:', yamlPath);
  
  try {
    console.log('[loadActionSchema] About to read file...');
    const yamlContent = await readFile(yamlPath, 'utf8');
    console.log('[loadActionSchema] File read complete, size:', yamlContent.length);
    console.log('[loadActionSchema] About to parse YAML...');
    const design = loadYaml(yamlContent) as any;
    console.log('[loadActionSchema] YAML parsed, top keys:', Object.keys(design || {}));
    
    actionSchemaCache = new Map();
    
    // Extract tool definitions
    if (design.tools) {
      for (const [toolName, toolDef] of Object.entries(design.tools)) {
        actionSchemaCache.set(toolName, toolDef as ActionDefinition);
      }
    }
    
    console.log('[loadActionSchema] Schema cached with', actionSchemaCache.size, 'actions');
    return actionSchemaCache;
  } catch (error) {
    console.error('[loadActionSchema] Error:', error);
    throw new Error(`Failed to load unified-design.yaml: ${error}`);
  }
}

/**
 * Reconstruct SHAM block text for error context
 */
function reconstructShamBlock(block: Block): string {
  const lines: string[] = [];
  
  // Start line
  lines.push(`#!SHAM [@three-char-SHA-256: ${block.id || 'unknown'}]`);
  
  // Properties
  for (const [key, value] of Object.entries(block.properties || {})) {
    if (key.startsWith('@')) continue; // Skip annotations
    
    if (typeof value === 'string' && value.includes('\n')) {
      // Multi-line value with heredoc
      lines.push(`${key} = <<'EOT_SHAM_${block.id}'`);
      lines.push(value);
      lines.push(`EOT_SHAM_${block.id}`);
    } else {
      // Single line value - use JSON.stringify to handle quotes properly
      lines.push(`${key} = ${JSON.stringify(value)}`);
    }
  }
  
  // End line
  lines.push(`#!END_SHAM_${block.id || 'unknown'}`);
  
  return lines.join('\n');
}

// Re-export functions for consumers
export { validateShamBlock, transformToAction };
=== END FILE: ./proj/comp/sham-action-parser/src/index.ts ===

=== START FILE: ./proj/comp/fs-ops/test/unit/formatNodeError.test.ts ===
import { describe, it, expect } from 'vitest';
import { readFileSync } from 'fs';
import { join } from 'path';
import { formatNodeError } from '../../src/formatNodeError.js';

const testData = JSON.parse(
  readFileSync(join(__dirname, '../../test-data/unit/formatNodeError.cases.json'), 'utf8')
);

describe('formatNodeError', () => {
  testData.cases.forEach(({ name, input, expected }) => {
    it(name, () => {
      const result = formatNodeError(input[0], input[1], input[2], input[3]);
      expect(result).toEqual(expected);
    });
  });
});
=== END FILE: ./proj/comp/fs-ops/test/unit/formatNodeError.test.ts ===

=== START FILE: ./proj/comp/fs-ops/test/unit/replaceText.test.ts ===
import { describe, it, expect } from 'vitest';
import { replaceText } from '../../src/replaceText';
import { cases } from '../../test-data/unit/replaceText.cases';

describe('replaceText', () => {
  cases.forEach(({ name, input, expected, throws }) => {
    it(name, () => {
      if (throws) {
        expect(() => replaceText(...input)).toThrow(throws);
      } else {
        const result = replaceText(...input);
        expect(result).toEqual(expected);
      }
    });
  });
});

=== END FILE: ./proj/comp/fs-ops/test/unit/replaceText.test.ts ===

=== START FILE: ./proj/comp/fs-ops/test/integration/integration.test.ts ===
import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { readFileSync, rmSync, existsSync, writeFileSync, mkdirSync } from 'fs';
import { join } from 'path';
import { marked, Token } from 'marked';
import { parseShamResponse } from '../../../sham-action-parser/src/index.js';
import { executeFileOperation } from '../../src/index.js';

// Read test data
const testPath = join(__dirname, '../../test-data/integration/file-operations.cases.md');
const mdContent = readFileSync(testPath, 'utf8');

// Parse markdown to extract test cases with hierarchy
const tokens: Token[] = marked.lexer(mdContent);

interface TestCase {
  name: string;
  shamBlock: string;
  expectedBlock: string;
}

interface TestGroup {
  name: string;
  tests: TestCase[];
}

// Extract test structure from markdown
const testGroups: TestGroup[] = [];
let currentGroup: TestGroup | null = null;
let currentTest: Partial<TestCase> | null = null;
let codeBlockIndex = 0;

tokens.forEach(token => {
  if (token.type === 'heading' && 'depth' in token) {
    if (token.depth === 2) {
      // New test group (e.g., "file_write")
      currentGroup = {
        name: (token as any).text,
        tests: []
      };
      testGroups.push(currentGroup);
    } else if (token.depth === 3 && currentGroup) {
      // New test case
      currentTest = {
        name: (token as any).text
      };
    }
  } else if (token.type === 'code' && currentTest && currentGroup) {
    const codeBlock = token as Token & {type: 'code', text: string};
    if (!currentTest.shamBlock) {
      currentTest.shamBlock = codeBlock.text;
    } else if (!currentTest.expectedBlock) {
      currentTest.expectedBlock = codeBlock.text;
      // Test case complete
      currentGroup.tests.push(currentTest as TestCase);
      currentTest = null;
    }
  }
});

// Test cleanup paths
const testPaths = [
  '/tmp/test.txt',
  '/tmp/deeply',
  '/tmp/existing.txt',
  '/tmp/multiline.txt',
  '/tmp/to-delete.txt',
  '/tmp/does-not-exist.txt',
  '/tmp/source.txt',
  '/tmp/destination.txt',
  '/tmp/original.txt',
  '/tmp/new-dir',
  '/tmp/ghost.txt',
  '/tmp/nowhere.txt',
  '/tmp/source-exists.txt',
  '/tmp/dest-exists.txt',
  '/tmp/moveable.txt',
  '/tmp/replace-test.txt',
  '/tmp/multi-replace.txt',
  '/tmp/no-match.txt',
  '/tmp/does-not-exist-replace.txt',
  '/tmp/multiline-replace.txt',
  '/tmp/empty-search.txt',
  '/tmp/readable.txt',
  '/tmp/not-there.txt',
  '/tmp/multiple-occurrences.txt',
  '/tmp/replace-all.txt',
  '/tmp/count-mismatch.txt'
];

describe('fs-ops integration tests', () => {
  beforeEach(() => {
    console.log('[beforeEach] Starting cleanup');
    // Clean up any existing test files
    testPaths.forEach(path => {
      if (existsSync(path)) {
        console.log('[beforeEach] Removing:', path);
        rmSync(path, { recursive: true, force: true });
      }
    });
    console.log('[beforeEach] Cleanup complete');
  });

  afterEach(() => {
    // Clean up after tests
    testPaths.forEach(path => {
      if (existsSync(path)) {
        rmSync(path, { recursive: true, force: true });
      }
    });
  });

  testGroups.forEach(group => {
    describe(group.name, () => {
      group.tests.forEach(test => {
        it(test.name, async () => {
          console.log(`Starting test: ${test.name}`);
          const expectedOutput = JSON.parse(test.expectedBlock);
          
          // Extract test name without number prefix
          const tn = test.name.replace(/^\d{3}-/, '');
          
          // Set up test preconditions based on group and test name
          if (group.name === 'file_delete' && tn === 'delete-existing-file') {
            // Create file to be deleted
            writeFileSync('/tmp/to-delete.txt', 'This file will be deleted');
          } else if (group.name === 'file_move' && tn === 'move-file-simple') {
            // Create source file to be moved
            writeFileSync('/tmp/source.txt', 'Content to move');
          } else if (group.name === 'file_move' && tn === 'move-file-to-new-directory') {
            // Create file to move to new directory
            writeFileSync('/tmp/original.txt', 'Moving to new directory');
          } else if (group.name === 'file_move' && tn === 'move-to-existing-file') {
            // Create both source and destination files
            writeFileSync('/tmp/source-exists.txt', 'Source content');
            writeFileSync('/tmp/dest-exists.txt', 'Will be overwritten');
          } else if (group.name === 'file_replace_text' && tn === 'simple-text-replacement') {
            // Create file with text to replace
            writeFileSync('/tmp/replace-test.txt', 'Hello World');
          } else if (group.name === 'file_replace_text' && tn === 'replace-with-count-limit') {
            // Create file with multiple occurrences
            writeFileSync('/tmp/multi-replace.txt', 'foo bar foo baz foo qux foo');
          } else if (group.name === 'file_replace_text' && tn === 'replace-text-not-found') {
            // Create file without the search text
            writeFileSync('/tmp/no-match.txt', 'This file has no matches');
          } else if (group.name === 'file_replace_text' && tn === 'multiline-replacement') {
            // Create file with multiline content to replace
            writeFileSync('/tmp/multiline-replace.txt', `export function oldName() {
  console.log('oldName');
  return oldName;
}

function oldName() {
  return oldName;
}

const x = oldName();`);
          } else if (group.name === 'file_replace_text' && tn === 'empty-old-text-error') {
            // Create file for empty search test
            writeFileSync('/tmp/empty-search.txt', 'Some content here');
          } else if (group.name === 'file_replace_text' && tn === 'file-replace-text-multiple-occurrences') {
            // Create file with multiple occurrences
            writeFileSync('/tmp/multiple-occurrences.txt', 'duplicate text with duplicate word and duplicate again');
          } else if (group.name === 'file_replace_text' && tn === 'file-replace-all-text-no-count') {
            // Create file for replace all test
            writeFileSync('/tmp/replace-all.txt', 'foo bar foo baz foo');
          } else if (group.name === 'file_replace_text' && tn === 'file-replace-all-text-count-mismatch') {
            // Create file with specific count of occurrences
            writeFileSync('/tmp/count-mismatch.txt', 'test this test case');
          } else if (group.name === 'file_read' && tn === 'read-existing-file') {
            // Create file to read
            writeFileSync('/tmp/readable.txt', 'This is readable content');
          }
          
          // Parse SHAM to get actions
          let parseResult;
          try {
            parseResult = await parseShamResponse(test.shamBlock);
          } catch (error) {
            console.error('Parse error:', error);
            throw error;
          }
          
          console.log('Parse complete, got', parseResult.actions.length, 'actions');
          
          // Should have exactly one action
          expect(parseResult.actions).toHaveLength(1);
          expect(parseResult.errors).toHaveLength(0);
          
          console.log('About to execute action:', parseResult.actions[0]);
          
          // Execute the action
          const result = await executeFileOperation(parseResult.actions[0]);
          
          console.log('Execution complete, result:', result);
          
          // Compare result
          expect(result).toEqual(expectedOutput);
          console.log('Test assertion complete');
        });
      });
    });
  });
  
  // Debug test to verify Vitest is working
  it('simple sync test', () => {
    console.log('Simple test running');
    expect(1).toBe(1);
    console.log('Simple test complete');
  });
});
=== END FILE: ./proj/comp/fs-ops/test/integration/integration.test.ts ===

=== START FILE: ./proj/comp/fs-ops/test-data/unit/replaceText.cases.ts ===
export const cases = [
  {
    name: "simple replacement",
    input: ["hello world", "world", "universe"],
    expected: {
      result: "hello universe",
      replacements: 1,
    },
  },
  {
    name: "multiple replacements",
    input: ["foo bar foo baz", "foo", "qux"],
    expected: {
      result: "qux bar qux baz",
      replacements: 2,
    },
  },
  {
    name: "limited replacements",
    input: ["foo bar foo baz foo", "foo", "qux", 2],
    expected: {
      result: "qux bar qux baz foo",
      replacements: 2,
    },
  },
  {
    name: "multiline content replacement",
    input: [
`function oldName() {
  console.log('oldName');
  return oldName;
}`,
      "oldName",
      "newName",
    ],
    expected: {
      result: 
`function newName() {
  console.log('newName');
  return newName;
}`,
      replacements: 3,
    },
  },
  {
    name: "multiline search and replace",
    input: [
`const config = {
  old: {
    setting: true
  },
  other: false
};`,
`old: {
    setting: true
  }`,
`new: {
    setting: false,
    extra: 'value'
  }`,
    ],
    expected: {
      result: 
`const config = {
  new: {
    setting: false,
    extra: 'value'
  },
  other: false
};`,
      replacements: 1,
    },
  },
  {
    name: "replace code block with limit",
    input: [
`// TODO: fix this
function broken() {
  // TODO: fix this
  return null;
}
// TODO: fix this`,
      "// TODO: fix this",
      "// FIXED",
      2,
    ],
    expected: {
      result: 
`// FIXED
function broken() {
  // FIXED
  return null;
}
// TODO: fix this`,
      replacements: 2,
    },
  },
  {
    name: "no matches in multiline",
    input: [
`Line 1
Line 2
Line 3`,
      "Line 4",
      "Line X",
    ],
    expected: {
      result: 
`Line 1
Line 2
Line 3`,
      replacements: 0,
    },
  },
  {
    name: "empty old text",
    input: ["hello world", "", "xyz"],
    throws: "old_text cannot be empty",
  },
  {
    name: "overlapping replacements",
    input: ["aaaa", "aa", "b"],
    expected: {
      result: "bb",
      replacements: 2,
    },
  },
  {
    name: "replace with empty string",
    input: ["foo bar foo", "foo ", ""],
    expected: {
      result: "bar foo",
      replacements: 1,
    },
  },
  {
    name: "windows line endings",
    input: ["line1\r\nline2\r\nline3", "\r\n", "\n"],
    expected: {
      result: "line1\nline2\nline3",
      replacements: 2,
    },
  },
  {
    name: "indent-sensitive replacement",
    input: [
`class OldClass:
    def method(self):
        pass`,
      "OldClass",
      "NewClass",
    ],
    expected: {
      result: 
`class NewClass:
    def method(self):
        pass`,
      replacements: 1,
    },
  },
];

=== END FILE: ./proj/comp/fs-ops/test-data/unit/replaceText.cases.ts ===

=== START FILE: ./proj/comp/fs-ops/test-data/unit/formatNodeError.cases.json ===
{
  "cases": [
    {
      "name": "ENOENT error",
      "input": [
        { "code": "ENOENT", "message": "no such file or directory" },
        "/tmp/missing.txt",
        "open"
      ],
      "expected": "ENOENT: no such file or directory, open '/tmp/missing.txt'"
    },
    {
      "name": "EEXIST error",
      "input": [
        { "code": "EEXIST", "message": "file already exists" },
        "/tmp/existing.txt",
        "open"
      ],
      "expected": "EEXIST: file already exists, open '/tmp/existing.txt'"
    },
    {
      "name": "EACCES error",
      "input": [
        { "code": "EACCES", "message": "permission denied" },
        "/root/forbidden.txt",
        "open"
      ],
      "expected": "EACCES: permission denied, open '/root/forbidden.txt'"
    },
    {
      "name": "EISDIR error",
      "input": [
        { "code": "EISDIR", "message": "illegal operation on a directory" },
        "/tmp/",
        "read"
      ],
      "expected": "EISDIR: illegal operation on a directory, read '/tmp/'"
    },
    {
      "name": "unknown error code",
      "input": [
        { "code": "ESOMETHING", "message": "something went wrong" },
        "/tmp/file.txt",
        "write"
      ],
      "expected": "ESOMETHING: something went wrong"
    },
    {
      "name": "error without code",
      "input": [
        { "message": "Generic error occurred" },
        "/tmp/file.txt",
        "write"
      ],
      "expected": "Generic error occurred"
    },
    {
      "name": "error with no message or code",
      "input": [
        {},
        "/tmp/file.txt",
        "write"
      ],
      "expected": "Unknown error during write on '/tmp/file.txt'"
    },
    {
      "name": "rename ENOENT error",
      "input": [
        { "code": "ENOENT", "message": "no such file or directory" },
        "/tmp/source.txt",
        "rename",
        "/tmp/dest.txt"
      ],
      "expected": "ENOENT: no such file or directory, rename '/tmp/source.txt' -> '/tmp/dest.txt'"
    },
    {
      "name": "rename EACCES error",
      "input": [
        { "code": "EACCES", "message": "permission denied" },
        "/tmp/source.txt",
        "rename",
        "/root/dest.txt"
      ],
      "expected": "EACCES: permission denied, rename '/tmp/source.txt' -> '/root/dest.txt'"
    }
  ]
}
=== END FILE: ./proj/comp/fs-ops/test-data/unit/formatNodeError.cases.json ===

=== START FILE: ./proj/comp/fs-ops/test-data/integration/file-operations.cases.md ===
# File Operations Integration Tests

**Status**: [PLANNED] - Preliminary test format, subject to change

## file_write

### 001-simple-file-create

```sh sham
#!SHAM [@three-char-SHA-256: abc]
action = "file_write"
path = "/tmp/test.txt"
content = "Hello, World!"
#!END_SHAM_abc
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/test.txt",
    "bytesWritten": 13
  }
}
```

### 002-create-with-parent-dirs

```sh sham
#!SHAM [@three-char-SHA-256: pdr]
action = "file_write"
path = "/tmp/deeply/nested/dir/file.txt"
content = "Creates parent directories"
#!END_SHAM_pdr
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/deeply/nested/dir/file.txt",
    "bytesWritten": 26
  }
}
```


### 003-write-with-special-characters

```sh sham
#!SHAM [@three-char-SHA-256: spc]
action = "file_write"
path = "/tmp/special-chars.txt"
content = "Line with \"quotes\" and 'apostrophes'"
#!END_SHAM_spc
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/special-chars.txt",
    "bytesWritten": 36
  }
}
```

### 004-multiline-content

```sh sham
#!SHAM [@three-char-SHA-256: mlt]
action = "file_write"
path = "/tmp/multiline.txt"
content = <<'EOT_SHAM_mlt'
Line 1
Line 2
Line 3
EOT_SHAM_mlt
#!END_SHAM_mlt
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/multiline.txt",
    "bytesWritten": 20
  }
}
```

## file_delete

### 001-delete-existing-file

```sh sham
#!SHAM [@three-char-SHA-256: del]
action = "file_delete"
path = "/tmp/to-delete.txt"
#!END_SHAM_del
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/to-delete.txt"
  }
}
```

### 002-delete-nonexistent-file

```sh sham
#!SHAM [@three-char-SHA-256: dnf]
action = "file_delete"
path = "/tmp/does-not-exist.txt"
#!END_SHAM_dnf
```

```json
{
  "success": false,
  "error": "ENOENT: no such file or directory, unlink '/tmp/does-not-exist.txt'"
}
```

## file_replace_text

### 001-simple-text-replacement

```sh sham
#!SHAM [@three-char-SHA-256: rpl]
action = "file_replace_text"
path = "/tmp/replace-test.txt"
old_text = "Hello"
new_text = "Goodbye"
#!END_SHAM_rpl
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/replace-test.txt",
    "replacements": 1
  }
}
```

### 002-replace-with-count-limit

```sh sham
#!SHAM [@three-char-SHA-256: cnt]
action = "file_replace_all_text"
path = "/tmp/multi-replace.txt"
old_text = "foo"
new_text = "bar"
count = "2"
#!END_SHAM_cnt
```

```json
{
  "success": false,
  "error": "file_replace_all_text: expected 2 occurrences but found 4"
}
```

### 003-replace-text-not-found

```sh sham
#!SHAM [@three-char-SHA-256: nfr]
action = "file_replace_text"
path = "/tmp/no-match.txt"
old_text = "nonexistent"
new_text = "replacement"
#!END_SHAM_nfr
```

```json
{
  "success": false,
  "error": "file_replace_text: old_text not found in file"
}
```

### 004-replace-in-nonexistent-file

```sh sham
#!SHAM [@three-char-SHA-256: rnf]
action = "file_replace_text"
path = "/tmp/does-not-exist-replace.txt"
old_text = "text"
new_text = "other"
#!END_SHAM_rnf
```

```json
{
  "success": false,
  "error": "ENOENT: no such file or directory, open '/tmp/does-not-exist-replace.txt'"
}
```

### 005-multiline-replacement

```sh sham
#!SHAM [@three-char-SHA-256: mlr]
action = "file_replace_text"
path = "/tmp/multiline-replace.txt"
old_text = <<'EOT_SHAM_mlr'
export function oldName() {
  console.log('oldName');
  return oldName;
}
EOT_SHAM_mlr
new_text = <<'EOT_SHAM_mlr'
export function newName() {
  console.log('newName');
  return newName;
}
EOT_SHAM_mlr
#!END_SHAM_mlr
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/multiline-replace.txt",
    "replacements": 1
  }
}
```

### 006-empty-old-text-error

```sh sham
#!SHAM [@three-char-SHA-256: emt]
action = "file_replace_text"
path = "/tmp/empty-search.txt"
old_text = ""
new_text = "something"
#!END_SHAM_emt
```

```json
{
  "success": false,
  "error": "file_replace_text: old_text cannot be empty"
}
```

### 007-file-replace-text-multiple-occurrences

```sh sham
#!SHAM [@three-char-SHA-256: mul]
action = "file_replace_text"
path = "/tmp/multiple-occurrences.txt"
old_text = "duplicate"
new_text = "unique"
#!END_SHAM_mul
```

```json
{
  "success": false,
  "error": "file_replace_text: old_text appears 3 times, must appear exactly once"
}
```

### 008-file-replace-all-text-no-count

```sh sham
#!SHAM [@three-char-SHA-256: all]
action = "file_replace_all_text"
path = "/tmp/replace-all.txt"
old_text = "foo"
new_text = "bar"
#!END_SHAM_all
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/replace-all.txt",
    "replacements": 3
  }
}
```

### 009-file-replace-all-text-count-mismatch

```sh sham
#!SHAM [@three-char-SHA-256: mis]
action = "file_replace_all_text"
path = "/tmp/count-mismatch.txt"
old_text = "test"
new_text = "check"
count = "5"
#!END_SHAM_mis
```

```json
{
  "success": false,
  "error": "file_replace_all_text: expected 5 occurrences but found 2"
}
```

## file_read

### 001-read-existing-file

```sh sham
#!SHAM [@three-char-SHA-256: rdf]
action = "file_read"
path = "/tmp/readable.txt"
#!END_SHAM_rdf
```

```json
{
  "success": true,
  "data": {
    "path": "/tmp/readable.txt",
    "content": "This is readable content"
  }
}
```

### 002-read-nonexistent-file

```sh sham
#!SHAM [@three-char-SHA-256: rnx]
action = "file_read"
path = "/tmp/not-there.txt"
#!END_SHAM_rnx
```

```json
{
  "success": false,
  "error": "ENOENT: no such file or directory, open '/tmp/not-there.txt'"
}
```

## file_move

### 001-move-file-simple

```sh sham
#!SHAM [@three-char-SHA-256: mvs]
action = "file_move"
old_path = "/tmp/source.txt"
new_path = "/tmp/destination.txt"
#!END_SHAM_mvs
```

```json
{
  "success": true,
  "data": {
    "old_path": "/tmp/source.txt",
    "new_path": "/tmp/destination.txt"
  }
}
```

### 002-move-file-to-new-directory

```sh sham
#!SHAM [@three-char-SHA-256: mvd]
action = "file_move"
old_path = "/tmp/original.txt"
new_path = "/tmp/new-dir/moved.txt"
#!END_SHAM_mvd
```

```json
{
  "success": true,
  "data": {
    "old_path": "/tmp/original.txt",
    "new_path": "/tmp/new-dir/moved.txt"
  }
}
```

### 003-move-nonexistent-file

```sh sham
#!SHAM [@three-char-SHA-256: mnf]
action = "file_move"
old_path = "/tmp/ghost.txt"
new_path = "/tmp/nowhere.txt"
#!END_SHAM_mnf
```

```json
{
  "success": false,
  "error": "file_move: Source file not found '/tmp/ghost.txt' (ENOENT)"
}
```

### 004-move-to-existing-file

```sh sham
#!SHAM [@three-char-SHA-256: mef]
action = "file_move"
old_path = "/tmp/source-exists.txt"
new_path = "/tmp/dest-exists.txt"
#!END_SHAM_mef
```

```json
{
  "success": true,
  "data": {
    "old_path": "/tmp/source-exists.txt",
    "new_path": "/tmp/dest-exists.txt",
    "overwrote": true
  }
}
```
=== END FILE: ./proj/comp/fs-ops/test-data/integration/file-operations.cases.md ===

=== START FILE: ./proj/comp/fs-ops/doc/API.md ===
# Component: fs-ops

## Component Type
standard

## Documentation Debt
- [ ] Integration test format is preliminary [IMPLEMENTED]
- [ ] Error handling strategy needs refinement
- [ ] Consider batching operations for efficiency

## Dependencies

```yaml
dependencies:
  node:fs/promises:
    functions: [writeFile, unlink, mkdir, rename, stat]
    # Note: removed unused - readFile, rmdir, readdir (not yet implemented)
    
  node:path:
    functions: [dirname]
    # Note: removed unused - resolve, join (not yet needed)
    
  # Removed node:util - not used
  # Removed node:child_process - grep not yet implemented
```

## Exports

```yaml
exports:
  functions: [executeFileOperation]
  types: [FileOpResult, FileOpError]
```

### executeFileOperation
- **Signature**: `executeFileOperation(action: CladaAction) -> Promise<FileOpResult>`
- **Purpose**: Execute file system operations from parsed SHAM actions
- **Throws**: Never - all errors captured in FileOpResult
- **Test-data**: `test-data/integration/file-operations.md` [PLANNED]

### FileOpResult (type)
```typescript
interface FileOpResult {
  success: boolean
  data?: any           // Operation-specific return data
  error?: string       // Error message if failed
}
```

### FileOpError (type)
```typescript
interface FileOpError extends Error {
  code: string         // e.g., 'ENOENT', 'EACCES'
  path?: string        // File path involved
  operation: string    // Which operation failed
}
```

## Internal Functions

### createFile
- **Signature**: `createFile(path: string, content: string) -> Promise<void>`
- **Purpose**: Create new file with content, creating parent directories as needed

### writeFile  
- **Signature**: `writeFile(path: string, content: string) -> Promise<void>`
- **Purpose**: Overwrite existing file content

### replaceText
- **Signature**: `replaceText(content: string, oldText: string, newText: string, count?: number) -> {result: string, replacements: number}`
- **Purpose**: Pure function to replace text occurrences in string content

### deleteFile
- **Signature**: `deleteFile(path: string) -> Promise<void>`
- **Purpose**: Remove file

### moveFile
- **Signature**: `moveFile(oldPath: string, newPath: string) -> Promise<void>`
- **Purpose**: Move or rename file

### readFileContent
- **Signature**: `readFileContent(path: string) -> Promise<string>`
- **Purpose**: Read file content as UTF-8 string

### createDirectory
- **Signature**: `createDirectory(path: string) -> Promise<void>`
- **Purpose**: Create directory, including parent directories

### deleteDirectory
- **Signature**: `deleteDirectory(path: string) -> Promise<void>`
- **Purpose**: Remove directory (must be empty)

### listDirectory
- **Signature**: `listDirectory(path: string) -> Promise<DirEntry[]>`
- **Purpose**: List directory contents with metadata

### searchFiles
- **Signature**: `searchFiles(pattern: string, path: string, include?: string) -> Promise<GrepResult[]>`
- **Purpose**: Search for pattern in files (grep-like)

### globFiles
- **Signature**: `globFiles(pattern: string, basePath: string) -> Promise<string[]>`
- **Purpose**: Find files matching glob pattern

## Action Mapping

```typescript
const actionHandlers = {
  'file_write': handleFileWrite,
  'file_replace_text': handleFileReplaceText,
  'file_replace_all_text': handleFileReplaceAllText,
  'file_delete': handleFileDelete,
  'file_move': handleFileMove,
  'file_read': handleFileRead,
  'dir_create': createDirectory,
  'dir_delete': deleteDirectory,
  'ls': listDirectory,
  'grep': searchFiles,
  'glob': globFiles
}
```
=== END FILE: ./proj/comp/fs-ops/doc/API.md ===

=== START FILE: ./proj/comp/fs-ops/doc/DESIGN_TEMP.md ===
# fs-ops Design & Implementation Notes

**Status**: TEMPORARY - Implementation planning document

## Pseudocode for executeFileOperation

```javascript
async function executeFileOperation(action: CladaAction): Promise<FileOpResult> {
  try {
    // Get handler for action type
    const handler = actionHandlers[action.action];
    
    if (!handler) {
      return {
        success: false,
        error: `Unknown action: ${action.action}`
      };
    }
    
    // Call handler with action
    return await handler(action);
    
  } catch (error) {
    // This should never happen - handlers should catch their own errors
    return {
      success: false,
      error: `Unexpected error in executeFileOperation: ${error.message}`
    };
  }
}

// Individual handlers extract params and call internal functions
async function handleFileWrite(action: CladaAction): Promise<FileOpResult> {
  const { path, content } = action.parameters;
  
  try {
    
    // Create parent directories if needed
    const parentDir = dirname(path);
    const createdDirs = await ensureDirectoryExists(parentDir);
    
    // Write file
    const bytesWritten = await writeFileInternal(path, content);
    
    const result: FileOpResult = {
      success: true,
      data: {
        path,
        bytesWritten
      }
    };
    
    if (createdDirs.length > 0) {
      result.data.createdDirs = createdDirs;
    }
    
    return result;
    
  } catch (error) {
    return {
      success: false,
      error: formatNodeError(error, path, 'file_write')
    };
  }
}
```

## Extracted Pure Functions Needed

### Core File Operations
- `writeFileInternal(path: string, content: string): Promise<number>` - Returns bytes written
- `fileExists(path: string): Promise<boolean>` - Check if file exists
- `ensureDirectoryExists(path: string): Promise<string[]>` - Creates dirs, returns created paths
- `formatNodeError(error: any, path: string, operation: string): string` - Format Node errors consistently ✅

### Path Utilities (Pure)
- `getParentDirectory(path: string): string` - Extract parent dir from path ✅
- `normalizePath(path: string): string` - Normalize path separators
- `getCreatedDirectories(targetPath: string, existingPaths: Set<string>): string[]` - Determine which dirs were created

### Content Utilities (Pure)
- `getByteLength(content: string): number` - Calculate UTF-8 byte length ✅
- `replaceText(content: string, oldText: string, newText: string, count?: number): {result: string, replacements: number}` - Replace text occurrences ✅

### Directory Listing (Pure)
- `formatDirEntry(name: string, stats: Stats): DirEntry` - Format stat info into our type

## Implementation Progress

### Completed Pure Functions
1. ✅ `getParentDirectory` - Path extraction
2. ✅ `getByteLength` - UTF-8 byte counting
3. ✅ `replaceText` - Text replacement with count
4. ✅ `formatNodeError` - Error message formatting

## Implementation Order

1. **Path utilities** (pure functions, easy to test)
2. **Content utilities** (pure functions)
3. **Core file operations** (async, need mocking for tests)
4. **Action handlers** (integrate everything)

## Error Handling Strategy

- All internal functions throw native errors
- Handlers catch and format errors into FileOpResult
- Preserve original error codes (ENOENT, EACCES, etc.)
- Add context about what operation was attempted

## Test Data Structure Ideas

For pure functions:
```json
{
  "cases": [
    {
      "name": "extract parent from simple path",
      "input": ["/tmp/test.txt"],
      "expected": "/tmp"
    }
  ]
}
```

For async functions (need to mock fs):
```json
{
  "cases": [
    {
      "name": "file exists returns true",
      "input": ["/tmp/exists.txt"],
      "mockFs": {
        "/tmp/exists.txt": "content"
      },
      "expected": true
    }
  ]
}
```

## Notes

- Integration tests show we need to handle:
  - Creating parent directories automatically
  - Proper error messages matching Node.js format
  - Byte counting for content
  - Permission errors
=== END FILE: ./proj/comp/fs-ops/doc/DESIGN_TEMP.md ===

=== START FILE: ./proj/comp/fs-ops/doc/TODO.md ===
Ambiguous file_replace_text behavior:

- What happens if old_text appears multiple times but count=1? Which occurrence gets replaced?
    
    this results in an error!

What if old_text doesn't exist? Silent success or error?


    error!
=== END FILE: ./proj/comp/fs-ops/doc/TODO.md ===

=== START FILE: ./proj/comp/fs-ops/doc/ABSTRACT.md ===
# File System Operations

Executes file and directory operations from parsed SHAM actions, providing consistent error handling and operation results for LLM feedback.

## Overview

The fs-ops component is the primary executor for file system operations in clada. It receives parsed CladaAction objects from the sham-action-parser and performs the requested file system operations, returning standardized results that include success status, operation-specific data, and detailed error information when operations fail.

The component handles all file-related SHAM actions including file creation, editing, deletion, and reading, as well as directory operations and search functionality. It automatically handles common scenarios like creating parent directories for new files and provides detailed error messages that help the LLM understand why operations failed.

Each operation is designed to be atomic and independent, with no shared state between operations. This ensures predictable behavior and makes it easy for the LLM to reason about the effects of each action.
=== END FILE: ./proj/comp/fs-ops/doc/ABSTRACT.md ===

=== START FILE: ./proj/comp/fs-ops/doc/ARCH.md ===
# fs-ops Architecture

## Design Philosophy

**Defensive Operations with Clear Errors**: Every operation should handle common failure cases gracefully and return descriptive errors that help the LLM understand what went wrong.

## Key Design Decisions

### Parent Directory Creation
- `file_write` automatically creates parent directories.  creates parent directory if it doesn't exist

### Text Replacement Strategy  
- Use exact string matching for `file_replace_text`
- Count parameter limits replacements (default: 1)
- Return actual number of replacements made
- No regex support (keep it simple, predictable)

### Error Handling
- Never throw - return errors in result object
- Include original error codes (ENOENT, EACCES)
- Add context about what operation was attempted
- Preserve stack traces for debugging

### Path Resolution
- All paths must be absolute (validated by parser)
- No path traversal validation (security is out of scope for v1)
- Symlinks followed transparently

### Directory Operations
- `dir_delete` only removes empty directories
- No recursive deletion option (safety)
- `ls` returns flat listing with type info

### Search Operations
- `grep` uses simple substring matching
- Include patterns use glob syntax
- Results include line numbers
- Large file handling: streaming for files >10MB

## Performance Considerations

- File operations are synchronous from caller perspective
- No caching of file contents
- No watch/monitor capabilities
- Each operation is independent

## Encoding

- All text files assumed UTF-8
- Binary files not supported in v1
- Line endings preserved as-is

## Limits

- Max file size: 10MB (from unified-design.yaml)
- No limit on number of operations
- No timeout on individual operations

## Future Considerations

- Batch operations for efficiency
- Binary file support
- File watching/monitoring
- Atomic write operations (write to temp, rename)
- Path validation against allowlist


# fs-ops ARCH.md - Additional Sections

## File Move Behavior

### Overwrite Semantics
- `file_move` overwrites existing destination files without warning
- Matches Unix `mv` behavior and Node.js `rename()` semantics  
- Rationale: LLM can check first if needed, but overwrite-by-default enables single-shot operations
- Return data includes `overwrote: true` when destination existed

### Directory Creation
- `file_move` automatically creates parent directories for destination path
- Diverges from standard `rename()` which fails with ENOENT
- Rationale: Reduces LLM round-trips for common "move to new location" pattern
- Return data includes `createdDirs` array when directories were created

## Error Message Enhancement

### Problem: Ambiguous ENOENT
Node.js returns ENOENT for multiple distinct failures:
- Source file doesn't exist
- Destination directory doesn't exist  
- Parent directory permissions (sometimes)

### Solution: Pre-flight Checks
Operations perform checks before system calls to provide specific errors:
- `file_move`: Check source exists → "Source file not found" vs generic ENOENT
- `file_write`: Already creates parent dirs, avoiding ambiguity
- `file_delete`: Pass through Node errors (unambiguous)

### Error Format
When enhancing errors for LLM clarity:
```
{operation}: {specific_issue} '{path}' ({error_code})
```

Example: `file_move: Source file not found '/tmp/ghost.txt' (ENOENT)`
=== END FILE: ./proj/comp/fs-ops/doc/ARCH.md ===

=== START FILE: ./proj/comp/fs-ops/src/formatNodeError.ts ===
/**
 * Format Node.js filesystem errors into consistent error messages
 * @param error - The error object from Node.js
 * @param path - The file path involved in the operation
 * @param operation - The operation that was attempted
 * @returns Formatted error message string
 */
export function formatNodeError(error: any, path: string, operation: string, dest?: string): string {
  // Node.js errors have a code property
  if (error.code) {
    switch (error.code) {
      case 'ENOENT':
        if (operation === 'rename' && dest) {
          return `ENOENT: no such file or directory, rename '${path}' -> '${dest}'`;
        }
        return `ENOENT: no such file or directory, ${operation} '${path}'`;
      case 'EEXIST':
        return `EEXIST: file already exists, ${operation} '${path}'`;
      case 'EACCES':
        if (operation === 'rename' && dest) {
          return `EACCES: permission denied, rename '${path}' -> '${dest}'`;
        }
        return `EACCES: permission denied, ${operation} '${path}'`;
      case 'EISDIR':
        return `EISDIR: illegal operation on a directory, ${operation} '${path}'`;
      case 'ENOTDIR':
        return `ENOTDIR: not a directory, ${operation} '${path}'`;
      case 'ENOTEMPTY':
        return `ENOTEMPTY: directory not empty, ${operation} '${path}'`;
      default:
        return `${error.code}: ${error.message}`;
    }
  }
  
  // Fallback for non-Node errors
  return error.message || `Unknown error during ${operation} on '${path}'`;
}
=== END FILE: ./proj/comp/fs-ops/src/formatNodeError.ts ===

=== START FILE: ./proj/comp/fs-ops/src/fileSystemUtils.ts ===
import { stat } from 'fs/promises';

/**
 * Check if a file or directory exists
 * @param path - File or directory path to check
 * @returns true if exists, false otherwise
 */
export async function fileExists(path: string): Promise<boolean> {
  try {
    await stat(path);
    return true;
  } catch {
    return false;
  }
}
=== END FILE: ./proj/comp/fs-ops/src/fileSystemUtils.ts ===

=== START FILE: ./proj/comp/fs-ops/src/replaceText.ts ===
/**
 * Replace occurrences of text in content with optional count limit
 * @param content - Original content
 * @param oldText - Text to find and replace
 * @param newText - Replacement text
 * @param count - Maximum replacements (default: replace all)
 * @returns Object with result string and number of replacements made
 */
export function replaceText(
  content: string, 
  oldText: string, 
  newText: string, 
  count?: number
): { result: string; replacements: number } {
  if (oldText === '') {
    throw new Error('old_text cannot be empty');
  }

  let result = content;
  let replacements = 0;
  let startIndex = 0;

  while (true) {
    const index = result.indexOf(oldText, startIndex);
    if (index === -1) break;
    
    if (count !== undefined && replacements >= count) break;
    
    result = result.slice(0, index) + newText + result.slice(index + oldText.length);
    startIndex = index + newText.length;
    replacements++;
  }

  return { result, replacements };
}
=== END FILE: ./proj/comp/fs-ops/src/replaceText.ts ===

=== START FILE: ./proj/comp/fs-ops/src/index.ts ===
/**
 * fs-ops - File system operations executor for clada
 * 
 * Handles all file and directory operations from parsed SHAM actions
 */

import type { CladaAction } from '../../sham-action-parser/src/index.js';
import { writeFile, mkdir, unlink, rename, readFile } from 'fs/promises';
import { dirname } from 'path';
import { formatNodeError } from './formatNodeError.js';
import { fileExists } from './fileSystemUtils.js';
import { replaceText } from './replaceText.js';

export interface FileOpResult {
  success: boolean;
  data?: any;
  error?: string;
}

export class FileOpError extends Error {
  constructor(
    message: string,
    public code: string,
    public path?: string,
    public operation?: string
  ) {
    super(message);
    this.name = 'FileOpError';
  }
}

/**
 * Execute a file system operation from a parsed SHAM action
 * Never throws - all errors returned in result
 */
export async function executeFileOperation(action: CladaAction): Promise<FileOpResult> {
  try {
    const handler = actionHandlers[action.action];
    
    if (!handler) {
      return {
        success: false,
        error: `Unknown action: ${action.action}`
      };
    }
    
    return await handler(action);
    
  } catch (error: any) {
    // This should never happen - handlers should catch their own errors
    return {
      success: false,
      error: `Unexpected error in executeFileOperation: ${error.message}`
    };
  }
}

/**
 * Handle file_move action - moves/renames a file
 * Creates parent directories for destination if needed
 * Overwrites destination if it exists
 */
async function handleFileMove(action: CladaAction): Promise<FileOpResult> {
  const { old_path, new_path } = action.parameters;
  
  try {
    // Pre-flight check for better error messages
    const sourceExists = await fileExists(old_path);
    if (!sourceExists) {
      return {
        success: false,
        error: `file_move: Source file not found '${old_path}' (ENOENT)`
      };
    }
    
    // Check if destination exists (for overwrote flag)
    const destExists = await fileExists(new_path);
    
    // Create parent directories for destination
    const parentDir = dirname(new_path);
    await mkdir(parentDir, { recursive: true });
    
    // Move the file
    await rename(old_path, new_path);
    
    const result: FileOpResult = {
      success: true,
      data: {
        old_path,
        new_path
      }
    };
    
    if (destExists) {
      result.data.overwrote = true;
    }
    
    return result;
    
  } catch (error: any) {
    return {
      success: false,
      error: formatNodeError(error, old_path, 'rename', new_path)
    };
  }
}

/**
 * Handle file_delete action - removes a file
 */
async function handleFileDelete(action: CladaAction): Promise<FileOpResult> {
  const { path } = action.parameters;
  
  try {
    await unlink(path);
    
    return {
      success: true,
      data: {
        path
      }
    };
    
  } catch (error: any) {
    return {
      success: false,
      error: formatNodeError(error, path, 'unlink')
    };
  }
}

/**
 * Handle file_write action - writes/creates/overwrites a file with content
 * Automatically creates parent directories if needed
 */
async function handleFileWrite(action: CladaAction): Promise<FileOpResult> {
  const { path, content } = action.parameters;
  
  try {
    // Create parent directories if needed
    const parentDir = dirname(path);
    await mkdir(parentDir, { recursive: true });
    
    // Write file
    await writeFile(path, content, 'utf8');
    const bytesWritten = Buffer.byteLength(content, 'utf8');
    
    return {
      success: true,
      data: {
        path,
        bytesWritten
      }
    };
    
  } catch (error: any) {
    return {
      success: false,
      error: formatNodeError(error, path, 'open')
    };
  }
}

/**
 * Handle file_read action - reads file content
 */
async function handleFileRead(action: CladaAction): Promise<FileOpResult> {
  const { path } = action.parameters;
  
  try {
    const content = await readFile(path, 'utf8');
    
    return {
      success: true,
      data: {
        path,
        content
      }
    };
    
  } catch (error: any) {
    return {
      success: false,
      error: formatNodeError(error, path, 'open')
    };
  }
}

/**
 * Handle file_replace_text action - replaces EXACTLY ONE occurrence
 * Fails if old_text appears 0 or 2+ times
 */
async function handleFileReplaceText(action: CladaAction): Promise<FileOpResult> {
  const { path, old_text, new_text } = action.parameters;
  
  try {
    // Read existing file content
    const content = await readFile(path, 'utf8');
    
    // Count occurrences first
    let count = 0;
    let searchIndex = 0;
    while (true) {
      const index = content.indexOf(old_text, searchIndex);
      if (index === -1) break;
      count++;
      searchIndex = index + 1;
    }
    
    // Validate exactly one occurrence
    if (count === 0) {
      return {
        success: false,
        error: `file_replace_text: old_text not found in file`
      };
    }
    if (count > 1) {
      return {
        success: false,
        error: `file_replace_text: old_text appears ${count} times, must appear exactly once`
      };
    }
    
    // Replace the single occurrence
    const { result, replacements } = replaceText(content, old_text, new_text, 1);
    
    // Write updated content back
    await writeFile(path, result, 'utf8');
    
    return {
      success: true,
      data: {
        path,
        replacements
      }
    };
    
  } catch (error: any) {
    // Special case for empty old_text validation error
    if (error.message === 'old_text cannot be empty') {
      return {
        success: false,
        error: 'file_replace_text: old_text cannot be empty'
      };
    }
    
    return {
      success: false,
      error: formatNodeError(error, path, 'open')
    };
  }
}

/**
 * Handle file_replace_all_text action - replaces all occurrences
 * If count provided, validates exact match
 */
async function handleFileReplaceAllText(action: CladaAction): Promise<FileOpResult> {
  const { path, old_text, new_text, count } = action.parameters;
  
  try {
    // Read existing file content
    const content = await readFile(path, 'utf8');
    
    // If count specified, validate it matches actual occurrences
    if (count !== undefined) {
      // Count actual occurrences
      let actualCount = 0;
      let searchIndex = 0;
      while (true) {
        const index = content.indexOf(old_text, searchIndex);
        if (index === -1) break;
        actualCount++;
        searchIndex = index + 1;
      }
      
      if (actualCount !== count) {
        return {
          success: false,
          error: `file_replace_all_text: expected ${count} occurrences but found ${actualCount}`
        };
      }
    }
    
    // Replace all occurrences
    const { result, replacements } = replaceText(content, old_text, new_text);
    
    // Write updated content back
    await writeFile(path, result, 'utf8');
    
    return {
      success: true,
      data: {
        path,
        replacements
      }
    };
    
  } catch (error: any) {
    // Special case for empty old_text validation error
    if (error.message === 'old_text cannot be empty') {
      return {
        success: false,
        error: 'file_replace_all_text: old_text cannot be empty'
      };
    }
    
    return {
      success: false,
      error: formatNodeError(error, path, 'open')
    };
  }
}

// Internal function stubs for each operation

async function createFile(path: string, content: string): Promise<void> {
  throw new Error('Not implemented');
}

 

async function replaceTextInFile(path: string, oldText: string, newText: string, count?: number): Promise<number> {
  throw new Error('Not implemented');
}

async function deleteFile(path: string): Promise<void> {
  throw new Error('Not implemented');
}

async function moveFile(oldPath: string, newPath: string): Promise<void> {
  throw new Error('Not implemented');
}

async function readFileContent(path: string): Promise<string> {
  throw new Error('Not implemented');
}

async function createDirectory(path: string): Promise<void> {
  throw new Error('Not implemented');
}

async function deleteDirectory(path: string): Promise<void> {
  throw new Error('Not implemented');
}

interface DirEntry {
  name: string;
  type: 'file' | 'directory';
  size: number;
  modified: Date;
}

async function listDirectory(path: string): Promise<DirEntry[]> {
  throw new Error('Not implemented');
}

interface GrepResult {
  file: string;
  line_number: number;
  line: string;
}

async function searchFiles(pattern: string, path: string, include?: string): Promise<GrepResult[]> {
  throw new Error('Not implemented');
}

async function globFiles(pattern: string, basePath: string): Promise<string[]> {
  throw new Error('Not implemented');
}

// Action handler mapping
const actionHandlers: Record<string, (action: CladaAction) => Promise<FileOpResult>> = {
  'file_write': handleFileWrite,
  'file_replace_text': handleFileReplaceText,
  'file_replace_all_text': handleFileReplaceAllText,
  'file_delete': handleFileDelete,
  'file_move': handleFileMove,
  'file_read': handleFileRead,
  'dir_create': async (action) => {
    return { success: false, error: 'Not implemented' };
  },
  'dir_delete': async (action) => {
    return { success: false, error: 'Not implemented' };
  },
  'ls': async (action) => {
    return { success: false, error: 'Not implemented' };
  },
  'grep': async (action) => {
    return { success: false, error: 'Not implemented' };
  },
  'glob': async (action) => {
    return { success: false, error: 'Not implemented' };
  }
};
=== END FILE: ./proj/comp/fs-ops/src/index.ts ===

=== START FILE: ./proj/doc/API.md ===
# Component: clada

## Component Type
standard

## Dependencies

```yaml
dependencies:
  proj/comp/sham-action-parser:  # [IMPLEMENTED]
    functions: [parseShamResponse]
    types: [ParseResult, CladaAction, ParseError]
  
  proj/comp/fs-ops:              # [PLANNED]
    functions: [executeFileOperation]
    types: [FileOpResult]
  
  proj/comp/exec:                # [PLANNED]
    functions: [executeCommand]
    types: [ExecResult]
  
  proj/comp/git-tx:              # [PLANNED]
    functions: [ensureCleanRepo, commitChanges]
    types: [GitError]
  
  proj/comp/context:             # [PLANNED]
    functions: [addPath, removePath, listPaths, clearContext]
    types: [ContextError]
  
  external/nesl-js:
    functions: [parseSham]
    types: [Block, ParseResult, ParseError]
```

## Exports

```yaml
exports:
  classes:
    Clada:
      methods: [execute]
  types: 
    - ExecutionResult
    - ActionResult  
    - ParseError
    - CladaOptions
```

### Clada (class)
- **Purpose**: Main orchestrator executing SHAM blocks from LLM output
- **Constructor**: `new Clada(options?: CladaOptions)`
- **State**: Maintains working directory and context set across execute() calls

### execute
- **Signature**: `async execute(llmOutput: string): Promise<ExecutionResult>`
- **Purpose**: Parse and execute all SHAM blocks in LLM output, commit results
- **Process**: 
  1. Ensure clean git state
  2. Parse SHAM blocks
  3. Convert to actions
  4. Execute all valid actions
  5. Commit changes with summary
- **Throws**: Never - all errors captured in ExecutionResult
- **Test-data**: `test-data/execute/` [PLANNED]

### ExecutionResult (type)
```typescript
interface ExecutionResult {
  success: boolean              // False if any action failed
  totalBlocks: number          // Count of SHAM blocks found
  executedActions: number      // Count of actions attempted
  results: ActionResult[]      // All execution results
  parseErrors: ParseError[]    // SHAM parsing errors
  gitCommit?: string          // Commit SHA if successful
  fatalError?: string         // Git or system failure
}
```

### ActionResult (type)
```typescript
interface ActionResult {
  seq: number                  // Execution order
  blockId: string             // SHAM block ID
  action: string              // Action type
  params: Record<string, any> // Input parameters
  success: boolean
  error?: string              // Error message if failed
  data?: any                  // Action-specific output
}
```

### ParseError (type)
```typescript
interface ParseError {
  blockId?: string            // If error is block-specific
  error: ShamError            // From parser
}
```

### CladaOptions (type)
```typescript
interface CladaOptions {
  repoPath?: string           // Default: process.cwd()
  gitCommit?: boolean         // Default: true
}
```

## Internal Architecture

### Execution Flow
```
execute(llmOutput)
  → parseSHAM(llmOutput) → ShamParseResult
  → for each valid block:
    → convertToActions(block) → CladaAction[]
    → for each action:
      → route to appropriate executor
      → capture result
  → commitChanges(results)
  → return ExecutionResult
```

### Action Routing
- file_* → fs-ops
- dir_* → fs-ops
- exec → exec
- context_* → context
- ls, grep, glob → fs-ops (read operations)

### Error Handling
- Parser errors: Skip block, record error
- Conversion errors: Skip action, record error
- Execution errors: Continue execution, record error
- Git errors: Fatal, abort with fatalError
=== END FILE: ./proj/doc/API.md ===

=== START FILE: ./proj/doc/TODO.md ===

Issues revealed by execute.md test design:

Missing gitCommit field in expected results
Context operations not tested - are they SHAM actions?
Git state check not tested - what if dirty repo?
Directory creation for file operations unclear
=== END FILE: ./proj/doc/TODO.md ===

=== START FILE: ./proj/doc/ARCH.md ===
# Clada Architecture

## Core Design Decisions

### Transaction Model
- **No automatic rollback** - All operations commit, including failures
- **Failures are data** - LLM needs failure feedback for next steps
- **Forward-only progress** - Cheaper than regenerating responses
- **Manual rollback only** - Human-initiated via git commands
- **Boundary**: One git commit per `execute()` call
- **API**: Explicit transaction management (details TBD)

### SHAM Processing Pipeline
1. SHAM parser (external npm) → AST
2. AST → Action objects (sham-ast-converter)
3. Actions → Execution → Results

### SHAM AST Structure
```typescript
interface ShamParseResult {
  blocks: ShamBlock[]
  errors: ShamError[]
}

interface ShamBlock {
  id: string           // 3-char SHA-256
  properties: {
    action: string     // Maps to tool name (e.g., "file_write")
    [key: string]: any // Tool-specific parameters
  }
  startLine: number
  endLine: number
}

interface ShamError {
  code: string         // e.g., "DUPLICATE_KEY"
  line: number
  column: number
  length: number
  blockId: string
  content: string
  context: string
  message: string
}
```

### Error Propagation Strategy
- **Parser errors**: Skip blocks with parser errors, execute valid blocks only
- **Validation errors**: Skip invalid actions, execute valid ones
- **Execution errors**: Continue with remaining actions
- **Result**: Complete execution log with successes and failures

### Action Mapping
- SHAM `action` property maps directly to tool names from unified-design.yaml
- Use canonical names: `file_write`, `exec`, etc.

### Context Management
- **V1**: Simple `Set<string>` of file paths
- **Storage**: In-memory only, no persistence across sessions
- **V2 Future**: Sub-file references (lines, functions, sections)

### Execution Model
- **Synchronous**: All operations block until complete
- **CWD Management**: Session-based working directory
  - Default: Repository root
  - Each exec can override with `cwd` parameter
  - CWD persists within session, not across transactions
- **Results Format**: Flat array with sequence numbers
```typescript
interface ActionResult {
  seq: number          // Execution order
  blockId: string      // SHAM block ID
  action: string       // Action type
  params: any          // Input parameters
  success: boolean
  error?: string       // Error message if failed
  data?: any           // Action-specific output (stdout, content, etc.)
}
```

### Security Model (V1)
- **None**: Full filesystem access
- **No validation**: Any path allowed
- **No sandboxing**: Direct execution
- **V2 Future**: Path allowlisting per unified-design.yaml. FOR THIS REASON all fs stuff should immediately be implemented using our fs wrapper functions so this whitelisting/blacklisting is easy to implment in the future.

## Component Structure
```
clada/
├── proj/
│   ├── comp/
│   │   ├── sham-ast-converter/  # AST → Actions
│   │   ├── fs-ops/              # File/directory operations
│   │   ├── exec/                # Command execution
│   │   ├── git-tx/              # Git transaction management
│   │   └── context/             # Working set management
│   └── doc/
│       ├── API.md               # Main orchestrator API
│       ├── ARCH.md              # This document
│       └── ABSTRACT.md          # Project overview
```

## Implementation Priorities
1. `sham-ast-converter` - Cannot test without this
2. `fs-ops` - Core functionality
3. `exec` - Command execution
4. `git-tx` - Transaction wrapper
5. `context` - Working set (may be simple enough to inline)

## Open Questions

### Critical
1. **SHAM parser package**: `nesl-js` from `github:nesl-lang/nesl-js`
   - Import: `const { parseSHAM } = require('nesl-js')`
2. **Transaction API**: Single `execute()` method processes SHAM block array

### Design
1. **Parser error handling**: Execute blocks with parser errors or skip?
2. **Git conflict handling**: How to handle conflicts during manual rollback?
3. **Concurrent access**: Multiple clada instances on same repo?
4. **Partial failure behavior**: Continue executing after first failure or abort?

### Future
1. **Context references**: Syntax for line ranges and functions
2. **Execution isolation**: Container/VM strategy for V2
3. **Streaming results**: Return results as actions complete or batch at end?

## Design Rationale

### Why No Automatic Rollback
Traditional transaction systems rollback on failure to maintain consistency. Clada explicitly rejects this because:
1. **LLM responses are expensive** - Regenerating costs time and money
2. **Partial success is informative** - LLM learns from failures
3. **Git preserves history** - Can always manually revert
4. **Forward progress over perfection** - Incremental improvement model

### Why Synchronous Execution
1. **Deterministic results** - LLM needs to know exact outcomes
2. **Sequential dependencies** - Later actions may depend on earlier ones
3. **Simpler implementation** - No async state management
4. **Git compatibility** - Git operations are inherently synchronous

### Why In-Memory Context
1. **Session isolation** - Each LLM conversation is independent
2. **No persistence complexity** - No file format versioning
3. **Git is the source of truth** - Files on disk matter, not context
4. **Quick reset** - New session = clean slate
=== END FILE: ./proj/doc/ARCH.md ===

=== START FILE: ./unified-design.yaml ===
# AI Coder Tools Schema - Unified Design

# Clada executes filesystem and runtime commands embedded in LLM output using SHAM syntax. It provides deterministic filesystem access and shell command execution for LLM coding agents.

# SHAM syntax example:

SHAM_synatx_example: |
  ```sh sham
  #!SHAM [@three-char-SHA-256: k7m]
  action = "file_write"
  path = "/tmp/\"hello\".txt"
  content = <<'EOT_SHAM_k7m'
  Hello world!
  how are you?
  EOT_SHAM_k7m
  #!END_SHAM_k7m
  ```


tools:
  # File Operations
  file_write:
    type: write
    description: Create new file while creating any necessary parent dirs. overwrites if already exists
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      content: {type: string, required: true}
    returns: {success: boolean, error?: string}
    
  file_replace_text:
    type: write
    description: Replace first and only instance of substring in file. must exist only once
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      old_text: {type: string, required: true}
      new_text: {type: string, required: true}
    returns: {success: boolean, replacements_made?: integer, error?: string}
    
  file_replace_all_text:
    type: write
    description: Replace each matching substring in file.  Number of matches (count) should usually be known and declared ahead of time.
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      old_text: {type: string, required: true}
      new_text: {type: string, required: true}
      count: {type: integer, required: false}
    returns: {success: boolean, replacements_made?: integer, error?: string}
    
  file_append:
    type: write
    description: Append to file
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
      content: {type: string, required: true}
    returns: {success: boolean, error?: string}
    
  file_delete:
    type: write
    description: Delete file
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  file_move:
    type: write
    description: Move/rename file
    accessibility: [llm]
    parameters:
      old_path: {type: string, required: true, format: absolute_path}
      new_path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  file_read:
    type: read
    description: Read file content (ephemeral)
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, content?: string, error?: string}
    
  # Directory Operations
  dir_create:
    type: write
    description: Create directory
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  dir_delete:
    type: write
    description: Delete directory
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
    
  # Read Operations
  ls:
    type: read
    description: List directory contents
    accessibility: [llm]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: 
      success: boolean
      data:
        type: array
        items:
          name: string
          type: string  # file|directory
          size: integer
          modified: timestamp
      error: string
    
  grep:
    type: read
    description: Search pattern in files
    accessibility: [llm]
    parameters:
      pattern: {type: string, required: true}
      path: {type: string, required: true, format: absolute_path}
      include: {type: string, required: false}
    returns: 
      success: boolean
      data:
        type: array
        items:
          file: string
          line_number: integer
          line: string
      error: string
    
  glob:
    type: read
    description: Find files matching pattern
    accessibility: [llm]
    parameters:
      pattern: {type: string, required: true}
      base_path: {type: string, required: true, format: absolute_path}
    returns: 
      success: boolean
      data:
        type: array
        items: string
      error: string
    
  # Execution
  exec:
    type: dynamic
    description: Execute code
    accessibility: [llm]
    parameters:
      code: {type: string, required: true}
      lang: {type: enum, values: [python, javascript, bash, ruby], required: true}
      version: {type: string, required: false}
      cwd: {type: string, required: false, format: absolute_path}
    returns: {success: boolean, stdout?: string, stderr?: string, exit_code?: integer, error?: string}

  # Context Operations -- for much later.  dont do this until clada has been integrated into bigfoot, the ai llm coder
  context_add:
    type: meta
    description: Add item to working context (persistent)
    accessibility: [llm, user]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
      
  context_remove:
    type: meta
    description: Remove item from working context
    accessibility: [llm, user]
    parameters:
      path: {type: string, required: true, format: absolute_path}
    returns: {success: boolean, error?: string}
      
  context_list:
    type: meta
    description: List items in working context
    accessibility: [llm, user]
    parameters: {}
    returns: 
      success: boolean
      data:
        type: array
        items:
          path: string
          size: integer
      error: string
    
  context_prune:
    type: meta
    description: Remove unused items from working context
    accessibility: [llm, user]
    parameters: {}
    returns: {success: boolean, removed?: array of strings, error?: string}
    
  context_clear:
    type: meta
    description: Clear all working context items
    accessibility: [llm, user]
    parameters: {}
    returns: {success: boolean, error?: string}
    
  # Git Operations
  git_squash:
    type: git
    description: Squash commits
    slash_command: true
    parameters:
      mode: {type: enum, values: [auto_ai, ai_messages, hours, days, contiguous_only=true, msg_contains], required: true}
      message: {type: string, required: false}
      hours: {type: integer, required: false, when: "mode=hours"}
      days: {type: integer, required: false, when: "mode=days"}
      msg_target: {type: string, required: false, when: "mode=msg_contains"}
    returns: {success: boolean, error?: string}
      
  undo:
    type: git
    description: Undo last AI changes
    accessibility: [user]
    constraints: ["No changes since last AI operation"]
    parameters: {}
    returns: {success: boolean, error?: string}
    
  git_step_back:
    type: git
    description: Move to previous commit
    accessibility: [user]
    behavior: Stashes untracked changes
    parameters: {}
    returns: {success: boolean, stashed_files?: array of strings, error?: string}
    
  git_step_forward:
    type: git
    description: Move to next commit
    accessibility: [user]
    behavior: Attempts to pop stashed changes
    parameters: {}
    returns: {success: boolean, conflicts?: array of strings, error?: string}

# Transaction Management
transaction_model:
  strategy: operation_group
  conflict_detection:
    methods:
      - mtime comparison (fast but unreliable)
      - checksum comparison (slower but accurate)
      - git status check (catches git-tracked changes)
    timing:
      - Check immediately before operation group
      - Check after each write operation
      - Final check before commit
  implementation:
    - Begin: git commit current state
    - Execute: track all operations
    - Validate: check for external modifications
    - Success: git commit with summary
    - Failure: git reset --hard to start
  atomicity: none  # Git operations are NOT atomic at filesystem level
  
# Security Model
security:
  path_validation:
    type: allowlist
    allowed_roots:
      - /home/user/projects
      - /tmp/ai-coder
    blacklist_patterns:
      - .*\.ssh.*
      - .*\.git/config
      - /etc/.*
      - /sys/.*
      - /proc/.*
  canonicalization: required  # Resolve ../ and symlinks before checking
  
# System Configuration
config:
  encoding: utf-8
  line_endings: preserve  # Don't normalize
  max_file_size: 10485760  # 10MB
  git_auto_push: false  # Require explicit push
  commit_message_format: "AI: {operation_summary}"

TODO: |   
  Transaction Safety: The git-based transaction model has race conditions:

    Gap between "git commit" and first operation
    Non-atomic filesystem ops vs git state
=== END FILE: ./unified-design.yaml ===

=== START FILE: ./README.md ===
# 💚 clada
common llm actions desktop actuator

=== END FILE: ./README.md ===

=== START FILE: ./xd5_ref.md ===
# XD5 LLM Quick Reference

## Core Principle
Documentation maintains dependency graphs for deterministic context assembly. Initial dependencies are hypotheses - implementation discovers reality. The STOP protocol ensures documentation evolves to match actual dependencies.

## File Structure
```
<repo>/
└── proj/
    ├── doc/
    │   ├── API.md        # ⚠️ CRITICAL: All dependencies + exports
    │   ├── ABSTRACT.md   # 60-word purpose + 300-word overview
    │   └── ARCH.md       # Technical decisions, constraints
    ├── test-data/        # Test cases as JSON/MD files
    ├── test/             # Minimal harnesses loading test-data
    ├── test-intn/        # Integration tests for dependencies
    ├── src/              # Implementation
    └── comp/             # Sub-components (recursive) - do not need 'proj' dirs
```

## API.md Template
```markdown
# Component: {name}

## Component Type
standard | types-only

## Dependencies
[Provisional - updated via STOP protocol when implementation reveals actual needs]

Mark internal component status: [PLANNED], [IN-PROGRESS], or [IMPLEMENTED]
External dependencies do not need status markers.

```yaml
dependencies:
  # Initial hypothesis based on design
  proj/comp/payment:                                       # [PLANNED]
    functions: [validateCard, processRefund] # may change
    types: [PaymentResult, CardType]
    errors: [PaymentError]
  
  proj/comp/auth:                                          # [IMPLEMENTED]
    functions: [checkPermission, validateToken]
    types: [User, TokenPayload]
  
  proj/comp/logger:                                        # [IN-PROGRESS]
    functions: [logTransaction]  # Audit requirement
  
  proj/comp/payment-types: "*"  # Wildcard for types-only  # [IMPLEMENTED] 
  
  external/lodash:
    functions: [groupBy, mapValues]
  
  external/@stripe/stripe-js:
    types: [Stripe, PaymentIntent]
    functions: [loadStripe]
```

## Exports
[Structured YAML for dependency graph tooling, then prose descriptions]

```yaml
exports:
  functions: [functionName1, functionName2]
  types: [Type1, Type2, Type3]
  classes:
    ClassName:
      methods: [method1, method2]
  errors: [CustomError1, CustomError2]
```

### {functionName}
- **Signature**: `{functionName}(param: Type) -> ReturnType`
- **Purpose**: Single sentence.
- **Throws**: `{ErrorType}` when {condition}
- **Test-data**: `test-data/{path}/{functionName}.json` [PLANNED|IMPLEMENTED]



## Workflow

### Core Flow: Design → Test → Implement

1. **Write docs**: ABSTRACT.md → ARCH.md → API.md (provisional)
2. **Design tests**: E2E hypothesis → Decompose → Unit tests  
3. **Implement**: Discover real dependencies → Update docs → Complete code

### Test Authority & Evolution

**Tests Are Source of Truth (But Not Infallible)**
- Tests define what code SHOULD do
- During debug: ALWAYS fix code to match tests first
- Test errors discovered? Ask human: "I believe test X is incorrect because Y. Should I update it?"
- NEVER auto-modify tests while debugging
- Each test change needs explicit approval

### Detailed Flow

1. **E2E Test Hypothesis** - Write component test-data (expect evolution)
2. **Pseudocode** - Rough implementation to discover structure
3. **Extract Functions** - Identify & extract all pure functions
4. **Unit Tests** - Write test-data for each function
5. **Implement Functions** - Red/green/debug (fix code, not tests)
6. **Revise E2E Tests** - Align with discovered behavior (ask human)
7. **Wire Component** - Connect tested functions
8. **Debug E2E** - Fix code until green

**Debug Protocol**: Test fails? → Try fixing code → Still failing? → Consider test error → Request human approval for any test change

**If docs are wrong**: STOP → Update docs → Update tests → Continue



### Critical Implementation Rules

**Initial Docs Are Hypotheses**: 
- First API.md contains best guesses
- Dependencies WILL be wrong
- This is expected and healthy
- Discovery through implementation is the goal

**🛑 STOP Protocol**: When implementation reveals doc errors:
1. STOP immediately
2. Update API.md/ARCH.md
3. Continue with correct docs

**Test Immutability**: 
- Test harnesses = frozen after creation
- Test data = only change with human approval
- Fix code, not tests (unless explicitly approved)

**Dependency Updates**:
- Add to API.md as discovered
- Include transitive deps if needed for understanding
- External deps must be explicit

## Test Data Format
```json
{
  "cases": [
    {
      "name": "descriptive name",
      "input": [arg1, arg2],
      "expected": {result},
      "throws": "ErrorType"  // optional
    }
  ]
}
```

## Quick Checks

Before implementing:
- [ ] API.md declares all exports?
- [ ] Dependencies section updated?
- [ ] Test data files created?

During implementation:
- [ ] Tests fail first (red phase)?
- [ ] Docs match reality? (if not → STOP)
- [ ] All imports declared in API.md?

## Common Patterns

**Extract pure functions during pseudocode**:
```javascript
// Pseudocode reveals:
// extractedFn: validateInput(x) -> bool
// extractedFn: processData(data) -> result
```

**Types-only components**: No test/ or src/, only doc/

**Path conventions**: All relative to `<repo>/`
- Component: `proj/comp/{name}`
- Nested: `proj/comp/{parent}/comp/{child}`


# update 

- need to update this so that we save our pseudocde in some sort of documetnation, maybe temp documentation.  so if we implement the fucntiosn to unit test, we dont get confused later about how theyre supposed to be used.

- ideally, each extracted function unit-testable function would be in its own file.  for parallelism with the unit test files
=== END FILE: ./xd5_ref.md ===

=== START FILE: ./package.json ===
{
  "name": "clada",
  "version": "0.1.0",
  "description": "Common LLM Actions Desktop Actuator",
  "type": "module",
  "engines": {
    "node": ">=20.0.0"
  },
  "scripts": {
    "build": "tsc --noEmit",
    "dev": "tsx watch proj/src/index.ts",
    "start": "tsx proj/src/index.ts",
    "test": "vitest run",
    "test:watch": "vitest watch",
    "test:run": "vitest run",
    "typecheck": "tsc --noEmit",
    "lint": "eslint proj/**/*.ts",
    "lint:fix": "eslint proj/**/*.ts --fix"
  },
  "dependencies": {
    "js-yaml": "^4.1.0",
    "marked": "^12.0.0",
    "nesl-js": "github:nesl-lang/nesl-js"
  },
  "devDependencies": {
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^20.19.9",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "eslint": "^8.56.0",
    "ts-node": "^10.9.2",
    "tsx": "^4.7.0",
    "typescript": "^5.8.3",
    "vitest": "^1.2.0"
  },
  "keywords": [
    "llm",
    "actions",
    "filesystem",
    "sham"
  ],
  "author": "",
  "license": "MIT"
}

=== END FILE: ./package.json ===

=== START FILE: ./.nvmrc ===
20.11.0
=== END FILE: ./.nvmrc ===

=== START FILE: ./scripts/checks/check-marked-types.ts ===
import { marked } from 'marked';
import type * as MarkedTypes from 'marked';

// Try to see what's available
console.log('marked keys:', Object.keys(marked));
console.log('marked.Tokens exists?', 'Tokens' in marked);

// The tokens are likely under a different export
const tokens = marked.lexer('# test\n```js\ncode\n```');
console.log('First token type:', tokens[0]?.type);
console.log('First token constructor:', tokens[0]?.constructor?.name);
=== END FILE: ./scripts/checks/check-marked-types.ts ===

=== START FILE: ./scripts/checks/check-nesl.js ===
import { parseSham } from 'nesl-js';
import * as nesl from 'nesl-js';

console.log('nesl-js exports:', Object.keys(nesl));
console.log('\nparseSham type:', typeof parseSham);

const result = parseSham(`#!SHAM [@three-char-SHA-256: abc]
action = "test"
#!END_SHAM_abc`);

console.log('\nResult:', JSON.stringify(result, null, 2));
console.log('\nResult type:', typeof result);
console.log('Result constructor:', result?.constructor?.name);
console.log('Blocks type:', Array.isArray(result?.blocks) ? 'array' : typeof result?.blocks);
=== END FILE: ./scripts/checks/check-nesl.js ===

=== START FILE: ./scripts/checks/check-marked.js ===
import { marked } from 'marked';

const md = `# Test
\`\`\`js
code here
\`\`\`
`;

const tokens = marked.lexer(md);
console.log('Token types:', tokens.map(t => ({
  type: t.type,
  hasText: 'text' in t,
  props: Object.keys(t)
})));
=== END FILE: ./scripts/checks/check-marked.js ===

=== START FILE: ./scripts/checks/errors/output.md ===
stuart@Stuarts-MacBook-Pro ~/r/c/s/c/errors (main)> npx ts-node file-spike.ts

(node:23139) ExperimentalWarning: Type Stripping is an experimental feature and might change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
stuart@Stuarts-MacBook-Pro ~/r/c/s/c/errors (main)> npx tsc file-spike.ts
                                                    node file-spike.js

```sh
--- TOP OF FILE ---
=== Node.js File Operation Error Spike ===

Script started!
Main is running

--- Simple write to /tmp ---
SUCCESS: Wrote /tmp/test-check.txt

--- Delete non-existent file ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, unlink '/tmp/spike-test/does-not-exist.txt'
ERROR SYSCALL: unlink
ERROR PATH: /tmp/spike-test/does-not-exist.txt
ERROR DEST: undefined
FULL ERROR: Error: ENOENT: no such file or directory, unlink '/tmp/spike-test/does-not-exist.txt'
    at async unlink (node:internal/fs/promises:1060:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'unlink',
  path: '/tmp/spike-test/does-not-exist.txt'
}

--- Delete from /root/ ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, unlink '/root/test.txt'
ERROR SYSCALL: unlink
ERROR PATH: /root/test.txt
ERROR DEST: undefined
FULL ERROR: Error: ENOENT: no such file or directory, unlink '/root/test.txt'
    at async unlink (node:internal/fs/promises:1060:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'unlink',
  path: '/root/test.txt'
}

--- Move non-existent file ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, rename '/tmp/spike-test/ghost.txt' -> '/tmp/spike-test/moved.txt'
ERROR SYSCALL: rename
ERROR PATH: /tmp/spike-test/ghost.txt
ERROR DEST: /tmp/spike-test/moved.txt
FULL ERROR: Error: ENOENT: no such file or directory, rename '/tmp/spike-test/ghost.txt' -> '/tmp/spike-test/moved.txt'
    at async rename (node:internal/fs/promises:779:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'rename',
  path: '/tmp/spike-test/ghost.txt',
  dest: '/tmp/spike-test/moved.txt'
}

--- Move to non-existent directory ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, rename '/tmp/spike-test/source.txt' -> '/tmp/spike-test/subdir/dest.txt'
ERROR SYSCALL: rename
ERROR PATH: /tmp/spike-test/source.txt
ERROR DEST: /tmp/spike-test/subdir/dest.txt
FULL ERROR: Error: ENOENT: no such file or directory, rename '/tmp/spike-test/source.txt' -> '/tmp/spike-test/subdir/dest.txt'
    at async rename (node:internal/fs/promises:779:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'rename',
  path: '/tmp/spike-test/source.txt',
  dest: '/tmp/spike-test/subdir/dest.txt'
}

--- Move from /root/ ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, rename '/root/source.txt' -> '/tmp/spike-test/dest.txt'
ERROR SYSCALL: rename
ERROR PATH: /root/source.txt
ERROR DEST: /tmp/spike-test/dest.txt
FULL ERROR: Error: ENOENT: no such file or directory, rename '/root/source.txt' -> '/tmp/spike-test/dest.txt'
    at async rename (node:internal/fs/promises:779:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'rename',
  path: '/root/source.txt',
  dest: '/tmp/spike-test/dest.txt'
}

--- Move to /root/ ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, rename '/tmp/spike-test/moveable.txt' -> '/root/dest.txt'
ERROR SYSCALL: rename
ERROR PATH: /tmp/spike-test/moveable.txt
ERROR DEST: /root/dest.txt
FULL ERROR: Error: ENOENT: no such file or directory, rename '/tmp/spike-test/moveable.txt' -> '/root/dest.txt'
    at async rename (node:internal/fs/promises:779:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'rename',
  path: '/tmp/spike-test/moveable.txt',
  dest: '/root/dest.txt'
}

--- Write to /root/ ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, open '/root/test.txt'
ERROR SYSCALL: open
ERROR PATH: /root/test.txt
ERROR DEST: undefined
FULL ERROR: Error: ENOENT: no such file or directory, open '/root/test.txt'
    at async open (node:internal/fs/promises:634:25)
    at async writeFile (node:internal/fs/promises:1208:14) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'open',
  path: '/root/test.txt'
}

--- Create directory in /root/ ---
ERROR CODE: ENOENT
ERROR MESSAGE: ENOENT: no such file or directory, mkdir '/root/testdir'
ERROR SYSCALL: mkdir
ERROR PATH: /root/testdir
ERROR DEST: undefined
FULL ERROR: Error: ENOENT: no such file or directory, mkdir '/root/testdir'
    at async mkdir (node:internal/fs/promises:853:10) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'mkdir',
  path: '/root/testdir'
}

--- Move overwriting existing file ---
SUCCESS: Overwrite successful. Content: "source"
stuart@Stuarts-MacBook-Pro ~/r/c/s/c/errors (main)> 
```
=== END FILE: ./scripts/checks/errors/output.md ===

=== START FILE: ./scripts/checks/errors/file-spike.js ===
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
console.log('--- TOP OF FILE ---');
var promises_1 = require("fs/promises");
var fs_1 = require("fs");
// import { dirname } from 'path';
console.log('=== Node.js File Operation Error Spike ===\n');
// Helper to capture error details
function tryOperation(name, operation) {
    return __awaiter(this, void 0, void 0, function () {
        var result, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log("\n--- ".concat(name, " ---"));
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, operation()];
                case 2:
                    result = _a.sent();
                    console.log('SUCCESS:', result);
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    console.log('ERROR CODE:', err_1.code);
                    console.log('ERROR MESSAGE:', err_1.message);
                    console.log('ERROR SYSCALL:', err_1.syscall);
                    console.log('ERROR PATH:', err_1.path);
                    console.log('ERROR DEST:', err_1.dest);
                    console.log('FULL ERROR:', err_1);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
console.log('Script started!');
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var testDir, rmSync_1, rmSync;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log('Main is running');
                    return [4 /*yield*/, tryOperation('Simple write to /tmp', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.writeFile)('/tmp/test-check.txt', 'Hello world')];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/, 'Wrote /tmp/test-check.txt'];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    testDir = '/tmp/spike-test';
                    if (!(0, fs_1.existsSync)(testDir)) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.resolve().then(function () { return require('fs'); })];
                case 2:
                    rmSync_1 = (_a.sent()).rmSync;
                    rmSync_1(testDir, { recursive: true, force: true });
                    _a.label = 3;
                case 3:
                    (0, fs_1.mkdirSync)(testDir);
                    // Test 1: Delete non-existent file
                    return [4 /*yield*/, tryOperation('Delete non-existent file', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.unlink)('/tmp/spike-test/does-not-exist.txt')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 4:
                    // Test 1: Delete non-existent file
                    _a.sent();
                    // Test 2: Delete from read-only location
                    return [4 /*yield*/, tryOperation('Delete from /root/', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.unlink)('/root/test.txt')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 5:
                    // Test 2: Delete from read-only location
                    _a.sent();
                    // Test 3: Move non-existent file
                    return [4 /*yield*/, tryOperation('Move non-existent file', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.rename)('/tmp/spike-test/ghost.txt', '/tmp/spike-test/moved.txt')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 6:
                    // Test 3: Move non-existent file
                    _a.sent();
                    // Test 4: Move to non-existent directory
                    (0, fs_1.writeFileSync)('/tmp/spike-test/source.txt', 'test');
                    return [4 /*yield*/, tryOperation('Move to non-existent directory', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.rename)('/tmp/spike-test/source.txt', '/tmp/spike-test/subdir/dest.txt')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 7:
                    _a.sent();
                    // Test 5: Move from/to /root/
                    return [4 /*yield*/, tryOperation('Move from /root/', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.rename)('/root/source.txt', '/tmp/spike-test/dest.txt')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 8:
                    // Test 5: Move from/to /root/
                    _a.sent();
                    (0, fs_1.writeFileSync)('/tmp/spike-test/moveable.txt', 'test');
                    return [4 /*yield*/, tryOperation('Move to /root/', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.rename)('/tmp/spike-test/moveable.txt', '/root/dest.txt')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 9:
                    _a.sent();
                    // Test 6: Write to /root/
                    return [4 /*yield*/, tryOperation('Write to /root/', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.writeFile)('/root/test.txt', 'content')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 10:
                    // Test 6: Write to /root/
                    _a.sent();
                    // Test 7: Create directory in /root/
                    return [4 /*yield*/, tryOperation('Create directory in /root/', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.mkdir)('/root/testdir')];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 11:
                    // Test 7: Create directory in /root/
                    _a.sent();
                    // Test 8: Move with overwrite
                    (0, fs_1.writeFileSync)('/tmp/spike-test/src-exists.txt', 'source');
                    (0, fs_1.writeFileSync)('/tmp/spike-test/dst-exists.txt', 'destination');
                    return [4 /*yield*/, tryOperation('Move overwriting existing file', function () { return __awaiter(_this, void 0, void 0, function () {
                            var content;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, promises_1.rename)('/tmp/spike-test/src-exists.txt', '/tmp/spike-test/dst-exists.txt')];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, (0, promises_1.readFile)('/tmp/spike-test/dst-exists.txt', 'utf8')];
                                    case 2:
                                        content = _a.sent();
                                        return [2 /*return*/, "Overwrite successful. Content: \"".concat(content, "\"")];
                                }
                            });
                        }); })];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, Promise.resolve().then(function () { return require('fs'); })];
                case 13:
                    rmSync = (_a.sent()).rmSync;
                    rmSync(testDir, { recursive: true, force: true });
                    return [2 /*return*/];
            }
        });
    });
}
main().catch(console.error);

=== END FILE: ./scripts/checks/errors/file-spike.js ===

=== START FILE: ./scripts/checks/errors/package.json ===
{
  "name": "errors",
  "version": "1.0.0",
  "description": "",
  "license": "ISC",
  "author": "",
  "type": "commonjs",
  "main": "index.ts",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  }
}

=== END FILE: ./scripts/checks/errors/package.json ===

=== START FILE: ./scripts/checks/errors/file-spike.ts ===
console.log('--- TOP OF FILE ---');

import { unlink, rename, mkdir, writeFile, readFile } from 'fs/promises';
import { existsSync, writeFileSync, mkdirSync } from 'fs';
// import { dirname } from 'path';

console.log('=== Node.js File Operation Error Spike ===\n');

// Helper to capture error details
async function tryOperation(name: string, operation: () => Promise<any>) {
  console.log(`\n--- ${name} ---`);
  try {
    const result = await operation();
    console.log('SUCCESS:', result);
  } catch (err: any) {
    console.log('ERROR CODE:', err.code);
    console.log('ERROR MESSAGE:', err.message);
    console.log('ERROR SYSCALL:', err.syscall);
    console.log('ERROR PATH:', err.path);
    console.log('ERROR DEST:', err.dest);
    console.log('FULL ERROR:', err);
  }
}
console.log('Script started!');

async function main() {
  console.log('Main is running');
  await tryOperation('Simple write to /tmp', async () => {
    await writeFile('/tmp/test-check.txt', 'Hello world');
    return 'Wrote /tmp/test-check.txt';
  });
  // Setup
  const testDir = '/tmp/spike-test';
  if (existsSync(testDir)) {
    const { rmSync } = await import('fs');
    rmSync(testDir, { recursive: true, force: true });
  }
  mkdirSync(testDir);
  
  // Test 1: Delete non-existent file
  await tryOperation('Delete non-existent file', async () => {
    return await unlink('/tmp/spike-test/does-not-exist.txt');
  });

  // Test 2: Delete from read-only location
  await tryOperation('Delete from /root/', async () => {
    return await unlink('/root/test.txt');
  });

  // Test 3: Move non-existent file
  await tryOperation('Move non-existent file', async () => {
    return await rename('/tmp/spike-test/ghost.txt', '/tmp/spike-test/moved.txt');
  });

  // Test 4: Move to non-existent directory
  writeFileSync('/tmp/spike-test/source.txt', 'test');
  await tryOperation('Move to non-existent directory', async () => {
    return await rename('/tmp/spike-test/source.txt', '/tmp/spike-test/subdir/dest.txt');
  });

  // Test 5: Move from/to /root/
  await tryOperation('Move from /root/', async () => {
    return await rename('/root/source.txt', '/tmp/spike-test/dest.txt');
  });

  writeFileSync('/tmp/spike-test/moveable.txt', 'test');
  await tryOperation('Move to /root/', async () => {
    return await rename('/tmp/spike-test/moveable.txt', '/root/dest.txt');
  });

  // Test 6: Write to /root/
  await tryOperation('Write to /root/', async () => {
    return await writeFile('/root/test.txt', 'content');
  });

  // Test 7: Create directory in /root/
  await tryOperation('Create directory in /root/', async () => {
    return await mkdir('/root/testdir');
  });

  // Test 8: Move with overwrite
  writeFileSync('/tmp/spike-test/src-exists.txt', 'source');
  writeFileSync('/tmp/spike-test/dst-exists.txt', 'destination');
  await tryOperation('Move overwriting existing file', async () => {
    await rename('/tmp/spike-test/src-exists.txt', '/tmp/spike-test/dst-exists.txt');
    // Check if destination was overwritten
    const content = await readFile('/tmp/spike-test/dst-exists.txt', 'utf8');
    return `Overwrite successful. Content: "${content}"`;
  });

  // Cleanup
  const { rmSync } = await import('fs');
  rmSync(testDir, { recursive: true, force: true });
}

main().catch(console.error);
=== END FILE: ./scripts/checks/errors/file-spike.ts ===

=== START FILE: ./tsconfig.json ===
{
  "compilerOptions": {
    // Modern output settings
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "lib": ["ES2022"],
    
    // Strict type checking
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    
    // Additional checks
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    
    // Output settings
    "outDir": "./dist",
    "rootDir": ".",
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    
    // Module resolution
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true,
    
    // Path mapping for cleaner imports
    "baseUrl": "."
  },
  "include": [
    "proj/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/test/**",
    "**/test-data/**"
  ]
}
=== END FILE: ./tsconfig.json ===

=== START FILE: ./replacer_llm_instructions.md ===
coding style guide:  TDD.  self documenting code.  every api  function name should make it super obvious who is doing what and why

WOL = "words or less, please"

keep the docs as lean

refactor code to make it smaller whenever possible.  DRY.

IMPORTANT:  do not generate edit instructions unless specifically asked to.  not necessary when just discussing and brainstorming

- all code functions and classes or large (10 lines of code or more?) need code comments to cocnisely and lcearly describe what they're doing and why and how

IMPORTANT: 

whenever you generate new code, use the following format.  dont just generate a standalone artifact.  when generating one or multiple new files, use the OVERWRITE pattern shown below 

For each specific edit that needs to happen, list a brief explanation for the change, list file name, and then explicitly make it clear what the target text is that need to be changed, and then the replacement text is that will replace it. Each of those blocks of text or code need to be explicit verbatim character by character Perfect matches for the intended text.  be sure to put the filenames and expalanations on their own lines for easy human reading even in output format.  like paragraph breaks before and after so thye're on their own lines even when not in code blocks.  use this format below exactly. note that the OVERWRITE style block can be used to create new files and its parent dirs.

make the search find text or code blocks as small as possible to still be unique identifiers for what needs to be changed in the underlying files 

for the file path, use as much of the path that you know of.  should be as specific as you can accurately be.  

make sure that file paths include the current main project dir

<<<EXPLANATION>>>

this is why the change should happen

<<<FILE>>>

package/replacer_demo_src/main.py

<<<SEARCH>>>
def old_function():
   x = 1
   y = 2
   return x + y
<<<REPLACE>>>
def new_function():
   result = 3
   return result
<<<END>>>




<<<EXPLANATION>>>

this is why this change should happen

<<<FILE>>>
july/coding/bobstuff/react/config/settings.json
<<<OVERWRITE>>>
{
   "debug": true,
   "port": 8080
}
<<<END>>>

NOTE: if you want to remove a section of code, your replace block must contain a blank line and a space:


<<<EXPLANATION>>>

remove the search code

<<<FILE>>>

package/replacer_demo_src/main.py

<<<SEARCH>>>
def old_function():
   x = 1
   y = 2
   return x + y
<<<REPLACE>>>
 
<<<END>>>

see how the REPLACE block can never be totally empty. must contain blank line and whitespace (space(s)) too

IMPORTANT:  each edit item must list its associated FILE.  each SEARCH/REPLACE or OVERWRITE etc block must be immediately preceeded by the respective file 

$$$$$$$$$$$$$

Prioritize substance, clarity, and depth. Challenge all my proposals, designs, and conclusions as hypotheses to be tested. Sharpen follow-up questions for precision, surfacing hidden assumptions, trade offs, and failure modes early. Default to terse, logically structured, information-dense responses unless detailed exploration is required. Skip unnecessary praise unless grounded in evidence. Explicitly acknowledge uncertainty when applicable. Always propose at least one alternative framing. Accept critical debate as normal and preferred. Treat all factual claims as provisional unless cited or clearly justified. Cite when appropriate. Acknowledge when claims rely on inference or incomplete information. Favor accuracy over sounding certain.

check anything online when it feels relevant.  good to compare our thoughts/assumptions with what other people are actually doing and thinking

when asked to share your thoughts (like if user says "wdyt"), then walk it out and talk it out gradually, incrementally, slowly, and thoughtfully.  challenge me so we can succeed overall

dont fall into the trap of equating "implementation" with "low-level".  implementation decisions can be high-level when they affect the system's fundamental behavior

IMPORTANT EDIT INSTRUCTIONS NOTE:

- always use full absolute file paths for edit instructions

- to delete a file, share bash commands with the user in your response.  do not use edit instructions to delete a file


=== END FILE: ./replacer_llm_instructions.md ===

=== START FILE: ./eslint.config.js ===
import js from '@eslint/js';
import typescript from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';

export default [
  js.configs.recommended,
  {
    files: ['**/*.ts'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        project: './tsconfig.json',
        ecmaVersion: 'latest',
        sourceType: 'module'
      }
    },
    plugins: {
      '@typescript-eslint': typescript
    },
    rules: {
      ...typescript.configs.recommended.rules,
      '@typescript-eslint/explicit-function-return-type': 'error',
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/consistent-type-imports': 'error',
      '@typescript-eslint/no-non-null-assertion': 'error'
    }
  }
];
=== END FILE: ./eslint.config.js ===

=== START FILE: ./vitest.config.ts ===
import { defineConfig } from 'vitest/config';
import path from 'path';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    include: ['proj/**/*.test.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'proj/test/',
        '**/*.test.ts'
      ]
    }
  },
  resolve: {
    alias: {}
  }
});
=== END FILE: ./vitest.config.ts ===
